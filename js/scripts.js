"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(!this.length)return void(t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var s=e.data(this[0],"validator");return s||(this.attr("novalidate","novalidate"),s=new e.validator(t,this[0]),e.data(this[0],"validator",s),s.settings.onsubmit&&(this.on("click.validate",":submit",function(t){s.submitButton=t.currentTarget,e(this).hasClass("cancel")&&(s.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(s.cancelSubmit=!0)}),this.on("submit.validate",function(t){function i(){var i,n;return s.submitButton&&(s.settings.submitHandler||s.formSubmitted)&&(i=e("<input type='hidden'/>").attr("name",s.submitButton.name).val(e(s.submitButton).val()).appendTo(s.currentForm)),!(s.settings.submitHandler&&!s.settings.debug)||(n=s.settings.submitHandler.call(s,s.currentForm,t),i&&i.remove(),void 0!==n&&n)}return s.settings.debug&&t.preventDefault(),s.cancelSubmit?(s.cancelSubmit=!1,i()):s.form()?s.pendingRequest?(s.formSubmitted=!0,!1):i():(s.focusInvalid(),!1)})),s)},valid:function(){var t,s,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,s=e(this[0].form).validate(),this.each(function(){t=s.element(this)&&t,t||(i=i.concat(s.errorList))}),s.errorList=i),t},rules:function(t,s){var i,n,r,a,o,l,h=this[0],d=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=h&&(!h.form&&d&&(h.form=this.closest("form")[0],h.name=this.attr("name")),null!=h.form)){if(t)switch(i=e.data(h.form,"validator").settings,n=i.rules,r=e.validator.staticRules(h),t){case"add":e.extend(r,e.validator.normalizeRule(s)),delete r.messages,n[h.name]=r,s.messages&&(i.messages[h.name]=e.extend(i.messages[h.name],s.messages));break;case"remove":return s?(l={},e.each(s.split(/\s/),function(e,t){l[t]=r[t],delete r[t]}),l):(delete n[h.name],r)}return a=e.validator.normalizeRules(e.extend({},e.validator.classRules(h),e.validator.attributeRules(h),e.validator.dataRules(h),e.validator.staticRules(h)),h),a.required&&(o=a.required,delete a.required,a=e.extend({required:o},a)),a.remote&&(o=a.remote,delete a.remote,a=e.extend(a,{remote:o})),a}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var s=e(t).val();return null!==s&&!!e.trim(""+s)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,s){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=s,this.init()},e.validator.format=function(t,s){return 1===arguments.length?function(){var s=e.makeArray(arguments);return s.unshift(t),e.validator.format.apply(this,s)}:void 0===s?t:(arguments.length>2&&s.constructor!==Array&&(s=e.makeArray(arguments).slice(1)),s.constructor!==Array&&(s=[s]),e.each(s,function(e,s){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return s})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,s){var i=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===s.which&&""===this.elementValue(t)||-1!==e.inArray(s.keyCode,i)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,s,i){"radio"===t.type?this.findByName(t.name).addClass(s).removeClass(i):e(t).addClass(s).removeClass(i)},unhighlight:function(t,s,i){"radio"===t.type?this.findByName(t.name).removeClass(s).addClass(i):e(t).removeClass(s).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var s=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");if(!this.form&&s&&(this.form=e(this).closest("form")[0],this.name=e(this).attr("name")),i===this.form){var n=e.data(this.form,"validator"),r="on"+t.type.replace(/^validate/,""),a=n.settings;a[r]&&!e(this).is(a.ignore)&&a[r].call(n,this,t)}}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var s,i=this.currentForm,n=this.groups={};e.each(this.settings.groups,function(t,s){"string"==typeof s&&(s=s.split(/\s/)),e.each(s,function(e,s){n[s]=t})}),s=this.settings.rules,e.each(s,function(t,i){s[t]=e.validator.normalizeRule(i)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var s,i,n=this.clean(t),r=this.validationTargetFor(n),a=this,o=!0;return void 0===r?delete this.invalid[n.name]:(this.prepareElement(r),this.currentElements=e(r),i=this.groups[r.name],i&&e.each(this.groups,function(e,t){t===i&&e!==r.name&&(n=a.validationTargetFor(a.clean(a.findByName(e))))&&n.name in a.invalid&&(a.currentElements.push(n),o=a.check(n)&&o)}),s=!1!==this.check(r),o=o&&s,this.invalid[r.name]=!s,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!s)),o},showErrors:function(t){if(t){var s=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:s.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,s=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&s++;return s},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,s={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var i=this.name||e(this).attr("name"),n=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),n&&(this.form=e(this).closest("form")[0],this.name=i),this.form===t.currentForm&&(!(i in s||!t.objectLength(e(this).rules()))&&(s[i]=!0,!0))})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var s,i,n=e(t),r=t.type,a=void 0!==n.attr("contenteditable")&&"false"!==n.attr("contenteditable");return"radio"===r||"checkbox"===r?this.findByName(t.name).filter(":checked").val():"number"===r&&void 0!==t.validity?t.validity.badInput?"NaN":n.val():(s=a?n.text():n.val(),"file"===r?"C:\\fakepath\\"===s.substr(0,12)?s.substr(12):(i=s.lastIndexOf("/"))>=0?s.substr(i+1):(i=s.lastIndexOf("\\"),i>=0?s.substr(i+1):s):"string"==typeof s?s.replace(/\r/g,""):s)},check:function(t){t=this.validationTargetFor(this.clean(t));var s,i,n,r,a=e(t).rules(),o=e.map(a,function(e,t){return t}).length,l=!1,h=this.elementValue(t);"function"==typeof a.normalizer?r=a.normalizer:"function"==typeof this.settings.normalizer&&(r=this.settings.normalizer),r&&(h=r.call(t,h),delete a.normalizer);for(i in a){n={method:i,parameters:a[i]};try{if("dependency-mismatch"===(s=e.validator.methods[i].call(this,h,t,n.parameters))&&1===o){l=!0;continue}if(l=!1,"pending"===s)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!s)return this.formatAndAdd(t,n),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+n.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+n.method+"' method."),e}}if(!l)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(t,s){return e(t).data("msg"+s.charAt(0).toUpperCase()+s.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var s=this.settings.messages[e];return s&&(s.constructor===String?s:s[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,s){"string"==typeof s&&(s={method:s});var i=this.findDefined(this.customMessage(t.name,s.method),this.customDataMessage(t,s.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[s.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),n=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,s.parameters,t):n.test(i)&&(i=e.validator.format(i.replace(n,"{$1}"),s.parameters)),i},formatAndAdd:function(e,t){var s=this.defaultMessage(e,t);this.errorList.push({message:s,element:e,method:t.method}),this.errorMap[e.name]=s,this.submitted[e.name]=s},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,s;for(e=0;this.errorList[e];e++)s=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,s.element,this.settings.errorClass,this.settings.validClass),this.showLabel(s.element,s.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,s){var i,n,r,a,o=this.errorsFor(t),l=this.idOrName(t),h=e(t).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(s)):(o=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(s||""),i=o,this.settings.wrapper&&(i=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),o.is("label")?o.attr("for",l):0===o.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(r=o.attr("id"),h?h.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(h+=" "+r):h=r,e(t).attr("aria-describedby",h),(n=this.groups[t.name])&&(a=this,e.each(a.groups,function(t,s){s===n&&e("[name='"+a.escapeCssMeta(t)+"']",a.currentForm).attr("aria-describedby",o.attr("id"))})))),!s&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,t)),this.toShow=this.toShow.add(o)},errorsFor:function(t){var s=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),n="label[for='"+s+"'], label[for='"+s+"'] *";return i&&(n=n+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(n)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,s){switch(s.nodeName.toLowerCase()){case"select":return e("option:selected",s).length;case"input":if(this.checkable(s))return this.findByName(s.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[void 0===e?"undefined":_typeof(e)]||this.dependTypes[void 0===e?"undefined":_typeof(e)](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,s){return!!e(t,s.form).length},function:function(e,t){return e(t)}},optional:function(t){var s=this.elementValue(t);return!e.validator.methods.required.call(this,s,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,s){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),s&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.submitButton&&e("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!s&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,s){return s="string"==typeof s&&s||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:s})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,s){t.constructor===String?this.classRuleSettings[t]=s:e.extend(this.classRuleSettings,t)},classRules:function(t){var s={},i=e(t).attr("class");return i&&e.each(i.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(s,e.validator.classRuleSettings[this])}),s},normalizeAttributeRule:function(e,t,s,i){/min|max|step/.test(s)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[s]=i:t===s&&"range"!==t&&(e[s]=!0)},attributeRules:function(t){var s,i,n={},r=e(t),a=t.getAttribute("type");for(s in e.validator.methods)"required"===s?(i=t.getAttribute(s),""===i&&(i=!0),i=!!i):i=r.attr(s),this.normalizeAttributeRule(n,a,s,i);return n.maxlength&&/-1|2147483647|524288/.test(n.maxlength)&&delete n.maxlength,n},dataRules:function(t){var s,i,n={},r=e(t),a=t.getAttribute("type");for(s in e.validator.methods)i=r.data("rule"+s.charAt(0).toUpperCase()+s.substring(1).toLowerCase()),""===i&&(i=!0),this.normalizeAttributeRule(n,a,s,i);return n},staticRules:function(t){var s={},i=e.data(t.form,"validator");return i.settings.rules&&(s=e.validator.normalizeRule(i.settings.rules[t.name])||{}),s},normalizeRules:function(t,s){return e.each(t,function(i,n){if(!1===n)return void delete t[i];if(n.param||n.depends){var r=!0;switch(_typeof(n.depends)){case"string":r=!!e(n.depends,s.form).length;break;case"function":r=n.depends.call(s,s)}r?t[i]=void 0===n.param||n.param:(e.data(s.form,"validator").resetElements(e(s)),delete t[i])}}),e.each(t,function(i,n){t[i]=e.isFunction(n)&&"normalizer"!==i?n(s):n}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var s;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(s=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(s[0]),Number(s[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var s={};e.each(t.split(/\s/),function(){s[this]=!0}),t=s}return t},addMethod:function(t,s,i){e.validator.methods[t]=s,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],s.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,s,i){if(!this.depend(i,s))return"dependency-mismatch";if("select"===s.nodeName.toLowerCase()){var n=e(s).val();return n&&n.length>0}return this.checkable(s)?this.getLength(t,s)>0:void 0!==t&&null!==t&&t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(e)},date:function(){var e=!1;return function(t,s){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(s)||!/Invalid|NaN/.test(new Date(t).toString())}}(),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,s,i){var n=e.isArray(t)?t.length:this.getLength(t,s);return this.optional(s)||n>=i},maxlength:function(t,s,i){var n=e.isArray(t)?t.length:this.getLength(t,s);return this.optional(s)||n<=i},rangelength:function(t,s,i){var n=e.isArray(t)?t.length:this.getLength(t,s);return this.optional(s)||n>=i[0]&&n<=i[1]},min:function(e,t,s){return this.optional(t)||e>=s},max:function(e,t,s){return this.optional(t)||e<=s},range:function(e,t,s){return this.optional(t)||e>=s[0]&&e<=s[1]},step:function(t,s,i){var n,r=e(s).attr("type"),a="Step attribute on input type "+r+" is not supported.",o=["text","number","range"],l=new RegExp("\\b"+r+"\\b"),h=r&&!l.test(o.join()),d=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},u=function(e){return Math.round(e*Math.pow(10,n))},c=!0;if(h)throw new Error(a);return n=d(i),(d(t)>n||u(t)%u(i)!=0)&&(c=!1),this.optional(s)||c},equalTo:function(t,s,i){var n=e(i);return this.settings.onfocusout&&n.not(".validate-equalTo-blur").length&&n.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(s).valid()}),t===n.val()},remote:function(t,s,i,n){if(this.optional(s))return"dependency-mismatch";n="string"==typeof n&&n||"remote";var r,a,o,l=this.previousValue(s,n);return this.settings.messages[s.name]||(this.settings.messages[s.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[s.name][n],this.settings.messages[s.name][n]=l.message,i="string"==typeof i&&{url:i}||i,o=e.param(e.extend({data:t},i.data)),l.old===o?l.valid:(l.old=o,r=this,this.startRequest(s),a={},a[s.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+s.name,dataType:"json",data:a,context:r.currentForm,success:function(e){var i,a,o,h=!0===e||"true"===e;r.settings.messages[s.name][n]=l.originalMessage,h?(o=r.formSubmitted,r.resetInternals(),r.toHide=r.errorsFor(s),r.formSubmitted=o,r.successList.push(s),r.invalid[s.name]=!1,r.showErrors()):(i={},a=e||r.defaultMessage(s,{method:n,parameters:t}),i[s.name]=l.message=a,r.invalid[s.name]=!0,r.showErrors(i)),l.valid=h,r.stopRequest(s,h)}},i)),"pending")}}});var t,s={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,i){var n=e.port;"abort"===e.mode&&(s[n]&&s[n].abort(),s[n]=i)}):(t=e.ajax,e.ajax=function(i){var n=("mode"in i?i:e.ajaxSettings).mode,r=("port"in i?i:e.ajaxSettings).port;return"abort"===n?(s[r]&&s[r].abort(),s[r]=t.apply(this,arguments),s[r]):t.apply(this,arguments)}),e}),function(e,t,s){function i(e){var i=t(".message-form-btn-send-message");return{$element:e.element,formData:{mailType:"contact_form_message",form_data:{}},sendMessage:function(e,i){var n=this;n.formData.form_data={},t.each(n.$element.serializeArray(),function(){n.formData.form_data[this.name]=this.value}),t.ajax({type:"POST",url:s.ajaxurl+"?action=send_mail",data:JSON.stringify(n.formData),contentType:"application/json; charset=utf-8",dataType:"json",success:function(t){t.result?(n._sendMessageSuccess(t),e&&e()):n._sendMessageError()},error:function(){n._sendMessageError(),i&&i()}})},_sendMessageSuccess:function(){i.off("click"),i.addClass("is-valid"),t(location).attr("href",window.location.href.match(/^.*\//)+"/message-successfully-sent")},_sendMessageError:function(){i.addClass("is-invalid"),this.$element.removeClass("was-validated")}}}t(document).ready(function(e){e("#message-form").submit(function(e){e.preventDefault()}),e("#message-form").validate({submitHandler:function(t){new i({element:e("#message-form")}).sendMessage()},rules:{name:{required:!0},email:{required:!0,email:!0},message:{required:!0}},messages:{name:"Please enter your name",email:"Please enter a valid email address",message:"Please enter your message"}})})}(window,jQuery,wp_var);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
