"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(!this.length)return void(t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var i=e.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new e.validator(t,this[0]),e.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(t){i.submitButton=t.currentTarget,e(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(t){function s(){var s,n;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(s=e("<input type='hidden'/>").attr("name",i.submitButton.name).val(e(i.submitButton).val()).appendTo(i.currentForm)),!(i.settings.submitHandler&&!i.settings.debug)||(n=i.settings.submitHandler.call(i,i.currentForm,t),s&&s.remove(),void 0!==n&&n)}return i.settings.debug&&t.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,s()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):s():(i.focusInvalid(),!1)})),i)},valid:function(){var t,i,s;return e(this[0]).is("form")?t=this.validate().form():(s=[],t=!0,i=e(this[0].form).validate(),this.each(function(){t=i.element(this)&&t,t||(s=s.concat(i.errorList))}),i.errorList=s),t},rules:function(t,i){var s,n,r,a,o,l,d=this[0],h=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=d&&(!d.form&&h&&(d.form=this.closest("form")[0],d.name=this.attr("name")),null!=d.form)){if(t)switch(s=e.data(d.form,"validator").settings,n=s.rules,r=e.validator.staticRules(d),t){case"add":e.extend(r,e.validator.normalizeRule(i)),delete r.messages,n[d.name]=r,i.messages&&(s.messages[d.name]=e.extend(s.messages[d.name],i.messages));break;case"remove":return i?(l={},e.each(i.split(/\s/),function(e,t){l[t]=r[t],delete r[t]}),l):(delete n[d.name],r)}return a=e.validator.normalizeRules(e.extend({},e.validator.classRules(d),e.validator.attributeRules(d),e.validator.dataRules(d),e.validator.staticRules(d)),d),a.required&&(o=a.required,delete a.required,a=e.extend({required:o},a)),a.remote&&(o=a.remote,delete a.remote,a=e.extend(a,{remote:o})),a}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var i=e(t).val();return null!==i&&!!e.trim(""+i)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,i){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=i,this.init()},e.validator.format=function(t,i){return 1===arguments.length?function(){var i=e.makeArray(arguments);return i.unshift(t),e.validator.format.apply(this,i)}:void 0===i?t:(arguments.length>2&&i.constructor!==Array&&(i=e.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),e.each(i,function(e,i){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return i})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,i){var s=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===i.which&&""===this.elementValue(t)||-1!==e.inArray(i.keyCode,s)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,i,s){"radio"===t.type?this.findByName(t.name).addClass(i).removeClass(s):e(t).addClass(i).removeClass(s)},unhighlight:function(t,i,s){"radio"===t.type?this.findByName(t.name).removeClass(i).addClass(s):e(t).removeClass(i).addClass(s)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var i=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");if(!this.form&&i&&(this.form=e(this).closest("form")[0],this.name=e(this).attr("name")),s===this.form){var n=e.data(this.form,"validator"),r="on"+t.type.replace(/^validate/,""),a=n.settings;a[r]&&!e(this).is(a.ignore)&&a[r].call(n,this,t)}}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,s=this.currentForm,n=this.groups={};e.each(this.settings.groups,function(t,i){"string"==typeof i&&(i=i.split(/\s/)),e.each(i,function(e,i){n[i]=t})}),i=this.settings.rules,e.each(i,function(t,s){i[t]=e.validator.normalizeRule(s)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var i,s,n=this.clean(t),r=this.validationTargetFor(n),a=this,o=!0;return void 0===r?delete this.invalid[n.name]:(this.prepareElement(r),this.currentElements=e(r),s=this.groups[r.name],s&&e.each(this.groups,function(e,t){t===s&&e!==r.name&&(n=a.validationTargetFor(a.clean(a.findByName(e))))&&n.name in a.invalid&&(a.currentElements.push(n),o=a.check(n)&&o)}),i=!1!==this.check(r),o=o&&i,this.invalid[r.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!i)),o},showErrors:function(t){if(t){var i=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:i.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,i=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,i={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var s=this.name||e(this).attr("name"),n=void 0!==e(this).attr("contenteditable")&&"false"!==e(this).attr("contenteditable");return!s&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),n&&(this.form=e(this).closest("form")[0],this.name=s),this.form===t.currentForm&&(!(s in i||!t.objectLength(e(this).rules()))&&(i[s]=!0,!0))})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var i,s,n=e(t),r=t.type,a=void 0!==n.attr("contenteditable")&&"false"!==n.attr("contenteditable");return"radio"===r||"checkbox"===r?this.findByName(t.name).filter(":checked").val():"number"===r&&void 0!==t.validity?t.validity.badInput?"NaN":n.val():(i=a?n.text():n.val(),"file"===r?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(s=i.lastIndexOf("/"))>=0?i.substr(s+1):(s=i.lastIndexOf("\\"),s>=0?i.substr(s+1):i):"string"==typeof i?i.replace(/\r/g,""):i)},check:function(t){t=this.validationTargetFor(this.clean(t));var i,s,n,r,a=e(t).rules(),o=e.map(a,function(e,t){return t}).length,l=!1,d=this.elementValue(t);"function"==typeof a.normalizer?r=a.normalizer:"function"==typeof this.settings.normalizer&&(r=this.settings.normalizer),r&&(d=r.call(t,d),delete a.normalizer);for(s in a){n={method:s,parameters:a[s]};try{if("dependency-mismatch"===(i=e.validator.methods[s].call(this,d,t,n.parameters))&&1===o){l=!0;continue}if(l=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!i)return this.formatAndAdd(t,n),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+n.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+n.method+"' method."),e}}if(!l)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(t,i){return e(t).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var i=this.settings.messages[e];return i&&(i.constructor===String?i:i[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,i){"string"==typeof i&&(i={method:i});var s=this.findDefined(this.customMessage(t.name,i.method),this.customDataMessage(t,i.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[i.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),n=/\$?\{(\d+)\}/g;return"function"==typeof s?s=s.call(this,i.parameters,t):n.test(s)&&(s=e.validator.format(s.replace(n,"{$1}"),i.parameters)),s},formatAndAdd:function(e,t){var i=this.defaultMessage(e,t);this.errorList.push({message:i,element:e,method:t.method}),this.errorMap[e.name]=i,this.submitted[e.name]=i},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,i;for(e=0;this.errorList[e];e++)i=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,i){var s,n,r,a,o=this.errorsFor(t),l=this.idOrName(t),d=e(t).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(i)):(o=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(i||""),s=o,this.settings.wrapper&&(s=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(s):this.settings.errorPlacement?this.settings.errorPlacement.call(this,s,e(t)):s.insertAfter(t),o.is("label")?o.attr("for",l):0===o.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(r=o.attr("id"),d?d.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(d+=" "+r):d=r,e(t).attr("aria-describedby",d),(n=this.groups[t.name])&&(a=this,e.each(a.groups,function(t,i){i===n&&e("[name='"+a.escapeCssMeta(t)+"']",a.currentForm).attr("aria-describedby",o.attr("id"))})))),!i&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,t)),this.toShow=this.toShow.add(o)},errorsFor:function(t){var i=this.escapeCssMeta(this.idOrName(t)),s=e(t).attr("aria-describedby"),n="label[for='"+i+"'], label[for='"+i+"'] *";return s&&(n=n+", #"+this.escapeCssMeta(s).replace(/\s+/g,", #")),this.errors().filter(n)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,i){switch(i.nodeName.toLowerCase()){case"select":return e("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[void 0===e?"undefined":_typeof(e)]||this.dependTypes[void 0===e?"undefined":_typeof(e)](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,i){return!!e(t,i.form).length},function:function(e,t){return e(t)}},optional:function(t){var i=this.elementValue(t);return!e.validator.methods.required.call(this,i,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.submitButton&&e("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,i){return i="string"==typeof i&&i||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:i})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,i){t.constructor===String?this.classRuleSettings[t]=i:e.extend(this.classRuleSettings,t)},classRules:function(t){var i={},s=e(t).attr("class");return s&&e.each(s.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(i,e.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(e,t,i,s){/min|max|step/.test(i)&&(null===t||/number|range|text/.test(t))&&(s=Number(s),isNaN(s)&&(s=void 0)),s||0===s?e[i]=s:t===i&&"range"!==t&&(e[i]=!0)},attributeRules:function(t){var i,s,n={},r=e(t),a=t.getAttribute("type");for(i in e.validator.methods)"required"===i?(s=t.getAttribute(i),""===s&&(s=!0),s=!!s):s=r.attr(i),this.normalizeAttributeRule(n,a,i,s);return n.maxlength&&/-1|2147483647|524288/.test(n.maxlength)&&delete n.maxlength,n},dataRules:function(t){var i,s,n={},r=e(t),a=t.getAttribute("type");for(i in e.validator.methods)s=r.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),""===s&&(s=!0),this.normalizeAttributeRule(n,a,i,s);return n},staticRules:function(t){var i={},s=e.data(t.form,"validator");return s.settings.rules&&(i=e.validator.normalizeRule(s.settings.rules[t.name])||{}),i},normalizeRules:function(t,i){return e.each(t,function(s,n){if(!1===n)return void delete t[s];if(n.param||n.depends){var r=!0;switch(_typeof(n.depends)){case"string":r=!!e(n.depends,i.form).length;break;case"function":r=n.depends.call(i,i)}r?t[s]=void 0===n.param||n.param:(e.data(i.form,"validator").resetElements(e(i)),delete t[s])}}),e.each(t,function(s,n){t[s]=e.isFunction(n)&&"normalizer"!==s?n(i):n}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var i;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(i=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(i[0]),Number(i[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var i={};e.each(t.split(/\s/),function(){i[this]=!0}),t=i}return t},addMethod:function(t,i,s){e.validator.methods[t]=i,e.validator.messages[t]=void 0!==s?s:e.validator.messages[t],i.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,i,s){if(!this.depend(s,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var n=e(i).val();return n&&n.length>0}return this.checkable(i)?this.getLength(t,i)>0:void 0!==t&&null!==t&&t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(e)},date:function(){var e=!1;return function(t,i){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(i)||!/Invalid|NaN/.test(new Date(t).toString())}}(),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,i,s){var n=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||n>=s},maxlength:function(t,i,s){var n=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||n<=s},rangelength:function(t,i,s){var n=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||n>=s[0]&&n<=s[1]},min:function(e,t,i){return this.optional(t)||e>=i},max:function(e,t,i){return this.optional(t)||e<=i},range:function(e,t,i){return this.optional(t)||e>=i[0]&&e<=i[1]},step:function(t,i,s){var n,r=e(i).attr("type"),a="Step attribute on input type "+r+" is not supported.",o=["text","number","range"],l=new RegExp("\\b"+r+"\\b"),d=r&&!l.test(o.join()),h=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},u=function(e){return Math.round(e*Math.pow(10,n))},c=!0;if(d)throw new Error(a);return n=h(s),(h(t)>n||u(t)%u(s)!=0)&&(c=!1),this.optional(i)||c},equalTo:function(t,i,s){var n=e(s);return this.settings.onfocusout&&n.not(".validate-equalTo-blur").length&&n.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(i).valid()}),t===n.val()},remote:function(t,i,s,n){if(this.optional(i))return"dependency-mismatch";n="string"==typeof n&&n||"remote";var r,a,o,l=this.previousValue(i,n);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][n],this.settings.messages[i.name][n]=l.message,s="string"==typeof s&&{url:s}||s,o=e.param(e.extend({data:t},s.data)),l.old===o?l.valid:(l.old=o,r=this,this.startRequest(i),a={},a[i.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:a,context:r.currentForm,success:function(e){var s,a,o,d=!0===e||"true"===e;r.settings.messages[i.name][n]=l.originalMessage,d?(o=r.formSubmitted,r.resetInternals(),r.toHide=r.errorsFor(i),r.formSubmitted=o,r.successList.push(i),r.invalid[i.name]=!1,r.showErrors()):(s={},a=e||r.defaultMessage(i,{method:n,parameters:t}),s[i.name]=l.message=a,r.invalid[i.name]=!0,r.showErrors(s)),l.valid=d,r.stopRequest(i,d)}},s)),"pending")}}});var t,i={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,s){var n=e.port;"abort"===e.mode&&(i[n]&&i[n].abort(),i[n]=s)}):(t=e.ajax,e.ajax=function(s){var n=("mode"in s?s:e.ajaxSettings).mode,r=("port"in s?s:e.ajaxSettings).port;return"abort"===n?(i[r]&&i[r].abort(),i[r]=t.apply(this,arguments),i[r]):t.apply(this,arguments)}),e}),function(e,t,i){function s(e){var s=t(".message-form-btn-send-message");return{$element:e.element,formData:{mailType:"contact_form_message",form_data:{}},sendMessage:function(e,s){var n=this;n.formData.form_data={},t.each(n.$element.serializeArray(),function(){n.formData.form_data[this.name]=this.value}),t.ajax({type:"POST",url:i.ajaxurl+"?action=send_mail",data:JSON.stringify(n.formData),contentType:"application/json; charset=utf-8",dataType:"json",success:function(t){t.result?(n._sendMessageSuccess(t),e&&e()):n._sendMessageError()},error:function(){n._sendMessageError(),s&&s()}})},_sendMessageSuccess:function(){s.off("click"),s.addClass("is-valid"),t(location).attr("href",window.location.href.match(/^.*\//)+"/message-successfully-sent")},_sendMessageError:function(){s.addClass("is-invalid"),this.$element.removeClass("was-validated")}}}t(document).ready(function(e){var t=e(".project-card-filter .project-card-filter__title").text();e(".project-card-filter .dropdown-item").click(function(){var i=e(this).text();e(this).hasClass("dropdown-item-all")&&(i=t),e(".project-card-filter__title").text(i)}),e("#message-form").submit(function(e){e.preventDefault()}),e("#message-form").validate({submitHandler:function(t){new s({element:e("#message-form")}).sendMessage()},rules:{name:{required:!0},email:{required:!0,email:!0},message:{required:!0}},messages:{name:"Please enter your name",email:"Please enter a valid email address",message:"Please enter your message"}})})}(window,jQuery,wp_var);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS52YWxpZGF0ZS5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsIl90eXBlb2YiLCJleHBvcnRzIiwicmVxdWlyZSIsImpRdWVyeSIsIiQiLCJleHRlbmQiLCJmbiIsInZhbGlkYXRlIiwib3B0aW9ucyIsInRoaXMiLCJsZW5ndGgiLCJkZWJ1ZyIsIndpbmRvdyIsImNvbnNvbGUiLCJ3YXJuIiwidmFsaWRhdG9yIiwiZGF0YSIsImF0dHIiLCJzZXR0aW5ncyIsIm9uc3VibWl0Iiwib24iLCJldmVudCIsInN1Ym1pdEJ1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJoYXNDbGFzcyIsImNhbmNlbFN1Ym1pdCIsInVuZGVmaW5lZCIsImhhbmRsZSIsImhpZGRlbiIsInJlc3VsdCIsInN1Ym1pdEhhbmRsZXIiLCJmb3JtU3VibWl0dGVkIiwibmFtZSIsInZhbCIsImFwcGVuZFRvIiwiY3VycmVudEZvcm0iLCJjYWxsIiwicmVtb3ZlIiwicHJldmVudERlZmF1bHQiLCJmb3JtIiwicGVuZGluZ1JlcXVlc3QiLCJmb2N1c0ludmFsaWQiLCJ2YWxpZCIsImVycm9yTGlzdCIsImlzIiwiZWFjaCIsImVsZW1lbnQiLCJjb25jYXQiLCJydWxlcyIsImNvbW1hbmQiLCJhcmd1bWVudCIsInN0YXRpY1J1bGVzIiwiZXhpc3RpbmdSdWxlcyIsInBhcmFtIiwiZmlsdGVyZWQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNsb3Nlc3QiLCJub3JtYWxpemVSdWxlIiwibWVzc2FnZXMiLCJzcGxpdCIsImluZGV4IiwibWV0aG9kIiwibm9ybWFsaXplUnVsZXMiLCJjbGFzc1J1bGVzIiwiYXR0cmlidXRlUnVsZXMiLCJkYXRhUnVsZXMiLCJyZXF1aXJlZCIsInJlbW90ZSIsImV4cHIiLCJwc2V1ZG9zIiwiYmxhbmsiLCJhIiwidHJpbSIsImZpbGxlZCIsInVuY2hlY2tlZCIsInByb3AiLCJkZWZhdWx0cyIsImluaXQiLCJmb3JtYXQiLCJzb3VyY2UiLCJwYXJhbXMiLCJhcmd1bWVudHMiLCJhcmdzIiwibWFrZUFycmF5IiwidW5zaGlmdCIsImFwcGx5IiwiY29uc3RydWN0b3IiLCJBcnJheSIsInNsaWNlIiwiaSIsIm4iLCJyZXBsYWNlIiwiUmVnRXhwIiwiZ3JvdXBzIiwiZXJyb3JDbGFzcyIsInBlbmRpbmdDbGFzcyIsInZhbGlkQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJmb2N1c0NsZWFudXAiLCJlcnJvckNvbnRhaW5lciIsImVycm9yTGFiZWxDb250YWluZXIiLCJpZ25vcmUiLCJpZ25vcmVUaXRsZSIsIm9uZm9jdXNpbiIsImxhc3RBY3RpdmUiLCJ1bmhpZ2hsaWdodCIsImhpZGVUaGVzZSIsImVycm9yc0ZvciIsIm9uZm9jdXNvdXQiLCJjaGVja2FibGUiLCJzdWJtaXR0ZWQiLCJvcHRpb25hbCIsIm9ua2V5dXAiLCJleGNsdWRlZEtleXMiLCJ3aGljaCIsImVsZW1lbnRWYWx1ZSIsImluQXJyYXkiLCJrZXlDb2RlIiwiaW52YWxpZCIsIm9uY2xpY2siLCJwYXJlbnROb2RlIiwiaGlnaGxpZ2h0IiwidHlwZSIsImZpbmRCeU5hbWUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwic2V0RGVmYXVsdHMiLCJlbWFpbCIsInVybCIsImRhdGUiLCJkYXRlSVNPIiwibnVtYmVyIiwiZGlnaXRzIiwiZXF1YWxUbyIsIm1heGxlbmd0aCIsIm1pbmxlbmd0aCIsInJhbmdlbGVuZ3RoIiwicmFuZ2UiLCJtYXgiLCJtaW4iLCJzdGVwIiwiYXV0b0NyZWF0ZVJhbmdlcyIsInByb3RvdHlwZSIsImRlbGVnYXRlIiwiZXZlbnRUeXBlIiwibGFiZWxDb250YWluZXIiLCJlcnJvckNvbnRleHQiLCJjb250YWluZXJzIiwiYWRkIiwidmFsdWVDYWNoZSIsInBlbmRpbmciLCJyZXNldCIsImtleSIsInZhbHVlIiwiaW52YWxpZEhhbmRsZXIiLCJjaGVja0Zvcm0iLCJlcnJvck1hcCIsInRyaWdnZXJIYW5kbGVyIiwic2hvd0Vycm9ycyIsInByZXBhcmVGb3JtIiwiZWxlbWVudHMiLCJjdXJyZW50RWxlbWVudHMiLCJjaGVjayIsInJzIiwiZ3JvdXAiLCJjbGVhbkVsZW1lbnQiLCJjbGVhbiIsImNoZWNrRWxlbWVudCIsInZhbGlkYXRpb25UYXJnZXRGb3IiLCJ2IiwicHJlcGFyZUVsZW1lbnQiLCJ0ZXN0Z3JvdXAiLCJwdXNoIiwibnVtYmVyT2ZJbnZhbGlkcyIsInRvSGlkZSIsImVycm9ycyIsIm1hcCIsIm1lc3NhZ2UiLCJzdWNjZXNzTGlzdCIsImdyZXAiLCJkZWZhdWx0U2hvd0Vycm9ycyIsInJlc2V0Rm9ybSIsImhpZGVFcnJvcnMiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0ciIsInJlc2V0RWxlbWVudHMiLCJvYmplY3RMZW5ndGgiLCJvYmoiLCJjb3VudCIsIm5vdCIsInRleHQiLCJhZGRXcmFwcGVyIiwiaGlkZSIsInNpemUiLCJmaW5kTGFzdEFjdGl2ZSIsImZpbHRlciIsInRyaWdnZXIiLCJlIiwicnVsZXNDYWNoZSIsImZpbmQiLCJlcnJvciIsInNlbGVjdG9yIiwiam9pbiIsInJlc2V0SW50ZXJuYWxzIiwidG9TaG93IiwiaWR4IiwiJGVsZW1lbnQiLCJ2YWxpZGl0eSIsImJhZElucHV0Iiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJydWxlIiwibm9ybWFsaXplciIsInJ1bGVzQ291bnQiLCJkZXBlbmRlbmN5TWlzbWF0Y2giLCJwYXJhbWV0ZXJzIiwibWV0aG9kcyIsImZvcm1hdEFuZEFkZCIsImxvZyIsImlkIiwiVHlwZUVycm9yIiwiY3VzdG9tRGF0YU1lc3NhZ2UiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsInRvTG93ZXJDYXNlIiwiY3VzdG9tTWVzc2FnZSIsIm0iLCJTdHJpbmciLCJmaW5kRGVmaW5lZCIsImRlZmF1bHRNZXNzYWdlIiwidGl0bGUiLCJ0aGVyZWdleCIsInRlc3QiLCJ0b1RvZ2dsZSIsIndyYXBwZXIiLCJwYXJlbnQiLCJzaG93TGFiZWwiLCJzdWNjZXNzIiwidmFsaWRFbGVtZW50cyIsInNob3ciLCJpbnZhbGlkRWxlbWVudHMiLCJwbGFjZSIsImVycm9ySUQiLCJlbGVtZW50SUQiLCJpZE9yTmFtZSIsImRlc2NyaWJlZEJ5IiwiaHRtbCIsIndyYXAiLCJhcHBlbmQiLCJlcnJvclBsYWNlbWVudCIsImluc2VydEFmdGVyIiwicGFyZW50cyIsImVzY2FwZUNzc01ldGEiLCJtYXRjaCIsImRlc2NyaWJlciIsInN0cmluZyIsImdldExlbmd0aCIsIm5vZGVOYW1lIiwiZGVwZW5kIiwiZGVwZW5kVHlwZXMiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJzdGFydFJlcXVlc3QiLCJzdG9wUmVxdWVzdCIsInN1Ym1pdCIsInByZXZpb3VzVmFsdWUiLCJvbGQiLCJkZXN0cm95Iiwib2ZmIiwiY2xhc3NSdWxlU2V0dGluZ3MiLCJjcmVkaXRjYXJkIiwiYWRkQ2xhc3NSdWxlcyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJub3JtYWxpemVBdHRyaWJ1dGVSdWxlIiwiTnVtYmVyIiwiaXNOYU4iLCJnZXRBdHRyaWJ1dGUiLCJkZXBlbmRzIiwia2VlcFJ1bGUiLCJwYXJhbWV0ZXIiLCJpc0Z1bmN0aW9uIiwicGFydHMiLCJpc0FycmF5IiwidHJhbnNmb3JtZWQiLCJhZGRNZXRob2QiLCJjYWxsZWQiLCJEYXRlIiwidG9TdHJpbmciLCJkZWNpbWFscyIsImVycm9yTWVzc2FnZSIsInN1cHBvcnRlZFR5cGVzIiwicmUiLCJub3RTdXBwb3J0ZWQiLCJkZWNpbWFsUGxhY2VzIiwibnVtIiwidG9JbnQiLCJNYXRoIiwicm91bmQiLCJwb3ciLCJFcnJvciIsInRhcmdldCIsIm9wdGlvbkRhdGFTdHJpbmciLCJwcmV2aW91cyIsIm9yaWdpbmFsTWVzc2FnZSIsImFqYXgiLCJtb2RlIiwicG9ydCIsImRhdGFUeXBlIiwiY29udGV4dCIsInJlc3BvbnNlIiwicGVuZGluZ1JlcXVlc3RzIiwiYWpheFByZWZpbHRlciIsIl8iLCJ4aHIiLCJhYm9ydCIsImFqYXhTZXR0aW5ncyIsImV4cCIsIndwX3ZhciIsIk1lc3NhZ2VGb3JtIiwib3B0aW9uIiwiJGJ1dHRvblNlbmQiLCJmb3JtRGF0YSIsIm1haWxUeXBlIiwiZm9ybV9kYXRhIiwic2VuZE1lc3NhZ2UiLCJzZWxmIiwic2VyaWFsaXplQXJyYXkiLCJhamF4dXJsIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRlbnRUeXBlIiwiX3NlbmRNZXNzYWdlU3VjY2VzcyIsIl9zZW5kTWVzc2FnZUVycm9yIiwibG9jYXRpb24iLCJocmVmIiwiZG9jdW1lbnQiLCJyZWFkeSIsInByb2plY3RDYXJkRmlsdGVyVGl0bGUiLCJjbGljayIsImN1c3RvbVByb2plY3RDYXJkRmlsdGVyVGl0bGUiXSwibWFwcGluZ3MiOiJvT0FRQyxTQUFVQSxHQUNhLGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFDM0NELFFBQVMsVUFBV0QsR0FDUSxZQUFsQixtQkFBT0csUUFBUCxZQUFBQyxRQUFPRCxVQUF1QkEsT0FBT0UsUUFDL0NGLE9BQU9FLFFBQVVMLEVBQVNNLFFBQVMsV0FFbkNOLEVBQVNPLFNBRVQsU0FBVUMsR0FFWkEsRUFBRUMsT0FBUUQsRUFBRUUsSUFHWEMsU0FBVSxTQUFVQyxHQUduQixJQUFNQyxLQUFLQyxPQUlWLFlBSEtGLEdBQVdBLEVBQVFHLE9BQVNDLE9BQU9DLFNBQ3ZDQSxRQUFRQyxLQUFNLHdEQU1oQixJQUFJQyxHQUFZWCxFQUFFWSxLQUFNUCxLQUFNLEdBQUssWUFDbkMsT0FBS00sS0FLTE4sS0FBS1EsS0FBTSxhQUFjLGNBRXpCRixFQUFZLEdBQUlYLEdBQUVXLFVBQVdQLEVBQVNDLEtBQU0sSUFDNUNMLEVBQUVZLEtBQU1QLEtBQU0sR0FBSyxZQUFhTSxHQUUzQkEsRUFBVUcsU0FBU0MsV0FFdkJWLEtBQUtXLEdBQUksaUJBQWtCLFVBQVcsU0FBVUMsR0FJL0NOLEVBQVVPLGFBQWVELEVBQU1FLGNBRzFCbkIsRUFBR0ssTUFBT2UsU0FBVSxZQUN4QlQsRUFBVVUsY0FBZSxPQUlrQkMsS0FBdkN0QixFQUFHSyxNQUFPUSxLQUFNLG9CQUNwQkYsRUFBVVUsY0FBZSxL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OiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGpRdWVyeSBWYWxpZGF0aW9uIFBsdWdpbiB2MS4xOS4xXHJcbiAqXHJcbiAqIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxOSBKw7ZybiBaYWVmZmVyZXJcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG4oZnVuY3Rpb24oIGZhY3RvcnkgKSB7XHJcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcclxuXHRcdGRlZmluZSggW1wianF1ZXJ5XCJdLCBmYWN0b3J5ICk7XHJcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoIFwianF1ZXJ5XCIgKSApO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcclxuXHR9XHJcbn0oZnVuY3Rpb24oICQgKSB7XHJcblxyXG4kLmV4dGVuZCggJC5mbiwge1xuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdmFsaWRhdGUvXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBub3RoaW5nOyBjYW4ndCBjaGFpbiBhbnl3YXlcblx0XHRpZiAoICF0aGlzLmxlbmd0aCApIHtcblx0XHRcdGlmICggb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiTm90aGluZyBzZWxlY3RlZCwgY2FuJ3QgdmFsaWRhdGUsIHJldHVybmluZyBub3RoaW5nLlwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgYSB2YWxpZGF0b3IgZm9yIHRoaXMgZm9ybSB3YXMgYWxyZWFkeSBjcmVhdGVkXG5cdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiICk7XG5cdFx0aWYgKCB2YWxpZGF0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdmFsaWRhdG9yO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBub3ZhbGlkYXRlIHRhZyBpZiBIVE1MNS5cblx0XHR0aGlzLmF0dHIoIFwibm92YWxpZGF0ZVwiLCBcIm5vdmFsaWRhdGVcIiApO1xuXG5cdFx0dmFsaWRhdG9yID0gbmV3ICQudmFsaWRhdG9yKCBvcHRpb25zLCB0aGlzWyAwIF0gKTtcblx0XHQkLmRhdGEoIHRoaXNbIDAgXSwgXCJ2YWxpZGF0b3JcIiwgdmFsaWRhdG9yICk7XG5cblx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5vbnN1Ym1pdCApIHtcblxuXHRcdFx0dGhpcy5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcIjpzdWJtaXRcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFRyYWNrIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gdG8gcHJvcGVybHkgaGFuZGxlIHNjcmlwdGVkXG5cdFx0XHRcdC8vIHN1Ym1pdHMgbGF0ZXIuXG5cdFx0XHRcdHZhbGlkYXRvci5zdWJtaXRCdXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXG5cdFx0XHRcdC8vIEFsbG93IHN1cHByZXNzaW5nIHZhbGlkYXRpb24gYnkgYWRkaW5nIGEgY2FuY2VsIGNsYXNzIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmhhc0NsYXNzKCBcImNhbmNlbFwiICkgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyB0aGUgaHRtbDUgZm9ybW5vdmFsaWRhdGUgYXR0cmlidXRlIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmF0dHIoIFwiZm9ybW5vdmFsaWRhdGVcIiApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gVmFsaWRhdGUgdGhlIGZvcm0gb24gc3VibWl0XG5cdFx0XHR0aGlzLm9uKCBcInN1Ym1pdC52YWxpZGF0ZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLmRlYnVnICkge1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBmb3JtIHN1Ym1pdCB0byBiZSBhYmxlIHRvIHNlZSBjb25zb2xlIG91dHB1dFxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmdW5jdGlvbiBoYW5kbGUoKSB7XG5cdFx0XHRcdFx0dmFyIGhpZGRlbiwgcmVzdWx0O1xuXG5cdFx0XHRcdFx0Ly8gSW5zZXJ0IGEgaGlkZGVuIGlucHV0IGFzIGEgcmVwbGFjZW1lbnQgZm9yIHRoZSBtaXNzaW5nIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0XHQvLyBUaGUgaGlkZGVuIGlucHV0IGlzIGluc2VydGVkIGluIHR3byBjYXNlczpcblx0XHRcdFx0XHQvLyAgIC0gQSB1c2VyIGRlZmluZWQgYSBgc3VibWl0SGFuZGxlcmBcblx0XHRcdFx0XHQvLyAgIC0gVGhlcmUgd2FzIGEgcGVuZGluZyByZXF1ZXN0IGR1ZSB0byBgcmVtb3RlYCBtZXRob2QgYW5kIGBzdG9wUmVxdWVzdCgpYFxuXHRcdFx0XHRcdC8vICAgICB3YXMgY2FsbGVkIHRvIHN1Ym1pdCB0aGUgZm9ybSBpbiBjYXNlIGl0J3MgdmFsaWRcblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zdWJtaXRCdXR0b24gJiYgKCB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlciB8fCB2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZCApICkge1xuXHRcdFx0XHRcdFx0aGlkZGVuID0gJCggXCI8aW5wdXQgdHlwZT0naGlkZGVuJy8+XCIgKVxuXHRcdFx0XHRcdFx0XHQuYXR0ciggXCJuYW1lXCIsIHZhbGlkYXRvci5zdWJtaXRCdXR0b24ubmFtZSApXG5cdFx0XHRcdFx0XHRcdC52YWwoICQoIHZhbGlkYXRvci5zdWJtaXRCdXR0b24gKS52YWwoKSApXG5cdFx0XHRcdFx0XHRcdC5hcHBlbmRUbyggdmFsaWRhdG9yLmN1cnJlbnRGb3JtICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlciAmJiAhdmFsaWRhdG9yLnNldHRpbmdzLmRlYnVnICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIuY2FsbCggdmFsaWRhdG9yLCB2YWxpZGF0b3IuY3VycmVudEZvcm0sIGV2ZW50ICk7XG5cdFx0XHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbmQgY2xlYW4gdXAgYWZ0ZXJ3YXJkczsgdGhhbmtzIHRvIG5vLWJsb2NrLXNjb3BlLCBoaWRkZW4gY2FuIGJlIHJlZmVyZW5jZWRcblx0XHRcdFx0XHRcdFx0aGlkZGVuLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCByZXN1bHQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcmV2ZW50IHN1Ym1pdCBmb3IgaW52YWxpZCBmb3JtcyBvciBjdXN0b20gc3VibWl0IGhhbmRsZXJzXG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gZmFsc2U7XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmZvcm0oKSApIHtcblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5wZW5kaW5nUmVxdWVzdCApIHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5mb2N1c0ludmFsaWQoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWRhdG9yO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdmFsaWQvXG5cdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmFsaWQsIHZhbGlkYXRvciwgZXJyb3JMaXN0O1xuXG5cdFx0aWYgKCAkKCB0aGlzWyAwIF0gKS5pcyggXCJmb3JtXCIgKSApIHtcblx0XHRcdHZhbGlkID0gdGhpcy52YWxpZGF0ZSgpLmZvcm0oKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXJyb3JMaXN0ID0gW107XG5cdFx0XHR2YWxpZCA9IHRydWU7XG5cdFx0XHR2YWxpZGF0b3IgPSAkKCB0aGlzWyAwIF0uZm9ybSApLnZhbGlkYXRlKCk7XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YWxpZCA9IHZhbGlkYXRvci5lbGVtZW50KCB0aGlzICkgJiYgdmFsaWQ7XG5cdFx0XHRcdGlmICggIXZhbGlkICkge1xuXHRcdFx0XHRcdGVycm9yTGlzdCA9IGVycm9yTGlzdC5jb25jYXQoIHZhbGlkYXRvci5lcnJvckxpc3QgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0dmFsaWRhdG9yLmVycm9yTGlzdCA9IGVycm9yTGlzdDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbGlkO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcnVsZXMvXG5cdHJ1bGVzOiBmdW5jdGlvbiggY29tbWFuZCwgYXJndW1lbnQgKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzWyAwIF0sXG5cdFx0XHRpc0NvbnRlbnRFZGl0YWJsZSA9IHR5cGVvZiB0aGlzLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0aGlzLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJmYWxzZVwiLFxuXHRcdFx0c2V0dGluZ3MsIHN0YXRpY1J1bGVzLCBleGlzdGluZ1J1bGVzLCBkYXRhLCBwYXJhbSwgZmlsdGVyZWQ7XG5cblx0XHQvLyBJZiBub3RoaW5nIGlzIHNlbGVjdGVkLCByZXR1cm4gZW1wdHkgb2JqZWN0OyBjYW4ndCBjaGFpbiBhbnl3YXlcblx0XHRpZiAoIGVsZW1lbnQgPT0gbnVsbCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoICFlbGVtZW50LmZvcm0gJiYgaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRlbGVtZW50LmZvcm0gPSB0aGlzLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdGVsZW1lbnQubmFtZSA9IHRoaXMuYXR0ciggXCJuYW1lXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIGVsZW1lbnQuZm9ybSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggY29tbWFuZCApIHtcblx0XHRcdHNldHRpbmdzID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5zZXR0aW5ncztcblx0XHRcdHN0YXRpY1J1bGVzID0gc2V0dGluZ3MucnVsZXM7XG5cdFx0XHRleGlzdGluZ1J1bGVzID0gJC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKTtcblx0XHRcdHN3aXRjaCAoIGNvbW1hbmQgKSB7XG5cdFx0XHRjYXNlIFwiYWRkXCI6XG5cdFx0XHRcdCQuZXh0ZW5kKCBleGlzdGluZ1J1bGVzLCAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCBhcmd1bWVudCApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIG1lc3NhZ2VzIGZyb20gcnVsZXMsIGJ1dCBhbGxvdyB0aGVtIHRvIGJlIHNldCBzZXBhcmF0ZWx5XG5cdFx0XHRcdGRlbGV0ZSBleGlzdGluZ1J1bGVzLm1lc3NhZ2VzO1xuXHRcdFx0XHRzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF0gPSBleGlzdGluZ1J1bGVzO1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50Lm1lc3NhZ2VzICkge1xuXHRcdFx0XHRcdHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9ICQuZXh0ZW5kKCBzZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0sIGFyZ3VtZW50Lm1lc3NhZ2VzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicmVtb3ZlXCI6XG5cdFx0XHRcdGlmICggIWFyZ3VtZW50ICkge1xuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmlsdGVyZWQgPSB7fTtcblx0XHRcdFx0JC5lYWNoKCBhcmd1bWVudC5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oIGluZGV4LCBtZXRob2QgKSB7XG5cdFx0XHRcdFx0ZmlsdGVyZWRbIG1ldGhvZCBdID0gZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXNbIG1ldGhvZCBdO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXJlZDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRkYXRhID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZXMoXG5cdFx0JC5leHRlbmQoXG5cdFx0XHR7fSxcblx0XHRcdCQudmFsaWRhdG9yLmNsYXNzUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmF0dHJpYnV0ZVJ1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5kYXRhUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50IClcblx0XHQpLCBlbGVtZW50ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgcmVxdWlyZWQgaXMgYXQgZnJvbnRcblx0XHRpZiAoIGRhdGEucmVxdWlyZWQgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVxdWlyZWQ7XG5cdFx0XHRkZWxldGUgZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCggeyByZXF1aXJlZDogcGFyYW0gfSwgZGF0YSApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSByZW1vdGUgaXMgYXQgYmFja1xuXHRcdGlmICggZGF0YS5yZW1vdGUgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVtb3RlO1xuXHRcdFx0ZGVsZXRlIGRhdGEucmVtb3RlO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCBkYXRhLCB7IHJlbW90ZTogcGFyYW0gfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59ICk7XG5cbi8vIEN1c3RvbSBzZWxlY3RvcnNcbiQuZXh0ZW5kKCAkLmV4cHIucHNldWRvcyB8fCAkLmV4cHJbIFwiOlwiIF0sIHtcdFx0Ly8gJ3x8ICQuZXhwclsgXCI6XCIgXScgaGVyZSBlbmFibGVzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGpRdWVyeSAxLjcuIENhbiBiZSByZW1vdmVkIHdoZW4gZHJvcHBpbmcgalEgMS43Lnggc3VwcG9ydFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvYmxhbmstc2VsZWN0b3IvXG5cdGJsYW5rOiBmdW5jdGlvbiggYSApIHtcblx0XHRyZXR1cm4gISQudHJpbSggXCJcIiArICQoIGEgKS52YWwoKSApO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZmlsbGVkLXNlbGVjdG9yL1xuXHRmaWxsZWQ6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHZhciB2YWwgPSAkKCBhICkudmFsKCk7XG5cdFx0cmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhISQudHJpbSggXCJcIiArIHZhbCApO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdW5jaGVja2VkLXNlbGVjdG9yL1xuXHR1bmNoZWNrZWQ6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhJCggYSApLnByb3AoIFwiY2hlY2tlZFwiICk7XG5cdH1cbn0gKTtcblxuLy8gQ29uc3RydWN0b3IgZm9yIHZhbGlkYXRvclxuJC52YWxpZGF0b3IgPSBmdW5jdGlvbiggb3B0aW9ucywgZm9ybSApIHtcblx0dGhpcy5zZXR0aW5ncyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgJC52YWxpZGF0b3IuZGVmYXVsdHMsIG9wdGlvbnMgKTtcblx0dGhpcy5jdXJyZW50Rm9ybSA9IGZvcm07XG5cdHRoaXMuaW5pdCgpO1xufTtcblxuLy8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLmZvcm1hdC9cbiQudmFsaWRhdG9yLmZvcm1hdCA9IGZ1bmN0aW9uKCBzb3VyY2UsIHBhcmFtcyApIHtcblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICkge1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhcmdzID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApO1xuXHRcdFx0YXJncy51bnNoaWZ0KCBzb3VyY2UgKTtcblx0XHRcdHJldHVybiAkLnZhbGlkYXRvci5mb3JtYXQuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHR9O1xuXHR9XG5cdGlmICggcGFyYW1zID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuIHNvdXJjZTtcblx0fVxuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHBhcmFtcy5jb25zdHJ1Y3RvciAhPT0gQXJyYXkgICkge1xuXHRcdHBhcmFtcyA9ICQubWFrZUFycmF5KCBhcmd1bWVudHMgKS5zbGljZSggMSApO1xuXHR9XG5cdGlmICggcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSApIHtcblx0XHRwYXJhbXMgPSBbIHBhcmFtcyBdO1xuXHR9XG5cdCQuZWFjaCggcGFyYW1zLCBmdW5jdGlvbiggaSwgbiApIHtcblx0XHRzb3VyY2UgPSBzb3VyY2UucmVwbGFjZSggbmV3IFJlZ0V4cCggXCJcXFxce1wiICsgaSArIFwiXFxcXH1cIiwgXCJnXCIgKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbjtcblx0XHR9ICk7XG5cdH0gKTtcblx0cmV0dXJuIHNvdXJjZTtcbn07XG5cbiQuZXh0ZW5kKCAkLnZhbGlkYXRvciwge1xuXG5cdGRlZmF1bHRzOiB7XG5cdFx0bWVzc2FnZXM6IHt9LFxuXHRcdGdyb3Vwczoge30sXG5cdFx0cnVsZXM6IHt9LFxuXHRcdGVycm9yQ2xhc3M6IFwiZXJyb3JcIixcblx0XHRwZW5kaW5nQ2xhc3M6IFwicGVuZGluZ1wiLFxuXHRcdHZhbGlkQ2xhc3M6IFwidmFsaWRcIixcblx0XHRlcnJvckVsZW1lbnQ6IFwibGFiZWxcIixcblx0XHRmb2N1c0NsZWFudXA6IGZhbHNlLFxuXHRcdGZvY3VzSW52YWxpZDogdHJ1ZSxcblx0XHRlcnJvckNvbnRhaW5lcjogJCggW10gKSxcblx0XHRlcnJvckxhYmVsQ29udGFpbmVyOiAkKCBbXSApLFxuXHRcdG9uc3VibWl0OiB0cnVlLFxuXHRcdGlnbm9yZTogXCI6aGlkZGVuXCIsXG5cdFx0aWdub3JlVGl0bGU6IGZhbHNlLFxuXHRcdG9uZm9jdXNpbjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR0aGlzLmxhc3RBY3RpdmUgPSBlbGVtZW50O1xuXG5cdFx0XHQvLyBIaWRlIGVycm9yIGxhYmVsIGFuZCByZW1vdmUgZXJyb3IgY2xhc3Mgb24gZm9jdXMgaWYgZW5hYmxlZFxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzQ2xlYW51cCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudCwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25mb2N1c291dDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApICYmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkIHx8ICF0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmtleXVwOiBmdW5jdGlvbiggZWxlbWVudCwgZXZlbnQgKSB7XG5cblx0XHRcdC8vIEF2b2lkIHJldmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gcHJlc3Npbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcga2V5c1xuXHRcdFx0Ly8gU2hpZnQgICAgICAgPT4gMTZcblx0XHRcdC8vIEN0cmwgICAgICAgID0+IDE3XG5cdFx0XHQvLyBBbHQgICAgICAgICA9PiAxOFxuXHRcdFx0Ly8gQ2FwcyBsb2NrICAgPT4gMjBcblx0XHRcdC8vIEVuZCAgICAgICAgID0+IDM1XG5cdFx0XHQvLyBIb21lICAgICAgICA9PiAzNlxuXHRcdFx0Ly8gTGVmdCBhcnJvdyAgPT4gMzdcblx0XHRcdC8vIFVwIGFycm93ICAgID0+IDM4XG5cdFx0XHQvLyBSaWdodCBhcnJvdyA9PiAzOVxuXHRcdFx0Ly8gRG93biBhcnJvdyAgPT4gNDBcblx0XHRcdC8vIEluc2VydCAgICAgID0+IDQ1XG5cdFx0XHQvLyBOdW0gbG9jayAgICA9PiAxNDRcblx0XHRcdC8vIEFsdEdyIGtleSAgID0+IDIyNVxuXHRcdFx0dmFyIGV4Y2x1ZGVkS2V5cyA9IFtcblx0XHRcdFx0MTYsIDE3LCAxOCwgMjAsIDM1LCAzNiwgMzcsXG5cdFx0XHRcdDM4LCAzOSwgNDAsIDQ1LCAxNDQsIDIyNVxuXHRcdFx0XTtcblxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PT0gOSAmJiB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApID09PSBcIlwiIHx8ICQuaW5BcnJheSggZXZlbnQua2V5Q29kZSwgZXhjbHVkZWRLZXlzICkgIT09IC0xICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgfHwgZWxlbWVudC5uYW1lIGluIHRoaXMuaW52YWxpZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmNsaWNrOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ2xpY2sgb24gc2VsZWN0cywgcmFkaW9idXR0b25zIGFuZCBjaGVja2JveGVzXG5cdFx0XHRpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cblx0XHRcdC8vIE9yIG9wdGlvbiBlbGVtZW50cywgY2hlY2sgcGFyZW50IHNlbGVjdCBpbiB0aGF0IGNhc2Vcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQucGFyZW50Tm9kZS5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQucGFyZW50Tm9kZSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLmFkZENsYXNzKCBlcnJvckNsYXNzICkucmVtb3ZlQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHVuaGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLnJlbW92ZUNsYXNzKCBlcnJvckNsYXNzICkuYWRkQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLnNldERlZmF1bHRzL1xuXHRzZXREZWZhdWx0czogZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdCQuZXh0ZW5kKCAkLnZhbGlkYXRvci5kZWZhdWx0cywgc2V0dGluZ3MgKTtcblx0fSxcblxuXHRtZXNzYWdlczoge1xuXHRcdHJlcXVpcmVkOiBcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXCIsXG5cdFx0cmVtb3RlOiBcIlBsZWFzZSBmaXggdGhpcyBmaWVsZC5cIixcblx0XHRlbWFpbDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxuXHRcdHVybDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBVUkwuXCIsXG5cdFx0ZGF0ZTogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlLlwiLFxuXHRcdGRhdGVJU086IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSAoSVNPKS5cIixcblx0XHRudW1iZXI6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyLlwiLFxuXHRcdGRpZ2l0czogXCJQbGVhc2UgZW50ZXIgb25seSBkaWdpdHMuXCIsXG5cdFx0ZXF1YWxUbzogXCJQbGVhc2UgZW50ZXIgdGhlIHNhbWUgdmFsdWUgYWdhaW4uXCIsXG5cdFx0bWF4bGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIG5vIG1vcmUgdGhhbiB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdG1pbmxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdHJhbmdlbGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfSBjaGFyYWN0ZXJzIGxvbmcuXCIgKSxcblx0XHRyYW5nZTogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0uXCIgKSxcblx0XHRtYXg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0bWluOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHswfS5cIiApLFxuXHRcdHN0ZXA6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSBtdWx0aXBsZSBvZiB7MH0uXCIgKVxuXHR9LFxuXG5cdGF1dG9DcmVhdGVSYW5nZXM6IGZhbHNlLFxuXG5cdHByb3RvdHlwZToge1xuXG5cdFx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLmVycm9yQ29udGV4dCA9IHRoaXMubGFiZWxDb250YWluZXIubGVuZ3RoICYmIHRoaXMubGFiZWxDb250YWluZXIgfHwgJCggdGhpcy5jdXJyZW50Rm9ybSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckNvbnRhaW5lciApLmFkZCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy52YWx1ZUNhY2hlID0ge307XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdHRoaXMucGVuZGluZyA9IHt9O1xuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHRcdHZhciBjdXJyZW50Rm9ybSA9IHRoaXMuY3VycmVudEZvcm0sXG5cdFx0XHRcdGdyb3VwcyA9ICggdGhpcy5ncm91cHMgPSB7fSApLFxuXHRcdFx0XHRydWxlcztcblx0XHRcdCQuZWFjaCggdGhpcy5zZXR0aW5ncy5ncm91cHMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnNwbGl0KCAvXFxzLyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCQuZWFjaCggdmFsdWUsIGZ1bmN0aW9uKCBpbmRleCwgbmFtZSApIHtcblx0XHRcdFx0XHRncm91cHNbIG5hbWUgXSA9IGtleTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fSApO1xuXHRcdFx0cnVsZXMgPSB0aGlzLnNldHRpbmdzLnJ1bGVzO1xuXHRcdFx0JC5lYWNoKCBydWxlcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdHJ1bGVzWyBrZXkgXSA9ICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdGZ1bmN0aW9uIGRlbGVnYXRlKCBldmVudCApIHtcblx0XHRcdFx0dmFyIGlzQ29udGVudEVkaXRhYmxlID0gdHlwZW9mICQoIHRoaXMgKS5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwidW5kZWZpbmVkXCIgJiYgJCggdGhpcyApLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJmYWxzZVwiO1xuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggIXRoaXMuZm9ybSAmJiBpc0NvbnRlbnRFZGl0YWJsZSApIHtcblx0XHRcdFx0XHR0aGlzLmZvcm0gPSAkKCB0aGlzICkuY2xvc2VzdCggXCJmb3JtXCIgKVsgMCBdO1xuXHRcdFx0XHRcdHRoaXMubmFtZSA9ICQoIHRoaXMgKS5hdHRyKCBcIm5hbWVcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWdub3JlIHRoZSBlbGVtZW50IGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBmb3JtLiBUaGlzIHdpbGwgaGFwcGVuIG1haW5seVxuXHRcdFx0XHQvLyB3aGVuIHNldHRpbmcgdGhlIGBmb3JtYCBhdHRyaWJ1dGUgb2YgYW4gaW5wdXQgdG8gdGhlIGlkIG9mIGFub3RoZXIgZm9ybS5cblx0XHRcdFx0aWYgKCBjdXJyZW50Rm9ybSAhPT0gdGhpcy5mb3JtICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXMuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLFxuXHRcdFx0XHRcdGV2ZW50VHlwZSA9IFwib25cIiArIGV2ZW50LnR5cGUucmVwbGFjZSggL152YWxpZGF0ZS8sIFwiXCIgKSxcblx0XHRcdFx0XHRzZXR0aW5ncyA9IHZhbGlkYXRvci5zZXR0aW5ncztcblx0XHRcdFx0aWYgKCBzZXR0aW5nc1sgZXZlbnRUeXBlIF0gJiYgISQoIHRoaXMgKS5pcyggc2V0dGluZ3MuaWdub3JlICkgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3NbIGV2ZW50VHlwZSBdLmNhbGwoIHZhbGlkYXRvciwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdFx0Lm9uKCBcImZvY3VzaW4udmFsaWRhdGUgZm9jdXNvdXQudmFsaWRhdGUga2V5dXAudmFsaWRhdGVcIixcblx0XHRcdFx0XHRcIjp0ZXh0LCBbdHlwZT0ncGFzc3dvcmQnXSwgW3R5cGU9J2ZpbGUnXSwgc2VsZWN0LCB0ZXh0YXJlYSwgW3R5cGU9J251bWJlciddLCBbdHlwZT0nc2VhcmNoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd0ZWwnXSwgW3R5cGU9J3VybCddLCBbdHlwZT0nZW1haWwnXSwgW3R5cGU9J2RhdGV0aW1lJ10sIFt0eXBlPSdkYXRlJ10sIFt0eXBlPSdtb250aCddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0nd2VlayddLCBbdHlwZT0ndGltZSddLCBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSwgW3R5cGU9J3JhbmdlJ10sIFt0eXBlPSdjb2xvciddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J10sIFtjb250ZW50ZWRpdGFibGVdLCBbdHlwZT0nYnV0dG9uJ11cIiwgZGVsZWdhdGUgKVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSwgb2xkSUVcblx0XHRcdFx0Ly8gXCJzZWxlY3RcIiBpcyBwcm92aWRlZCBhcyBldmVudC50YXJnZXQgd2hlbiBjbGlja2luZyBhIG9wdGlvblxuXHRcdFx0XHQub24oIFwiY2xpY2sudmFsaWRhdGVcIiwgXCJzZWxlY3QsIG9wdGlvbiwgW3R5cGU9J3JhZGlvJ10sIFt0eXBlPSdjaGVja2JveCddXCIsIGRlbGVnYXRlICk7XG5cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5pbnZhbGlkSGFuZGxlciApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLm9uKCBcImludmFsaWQtZm9ybS52YWxpZGF0ZVwiLCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmZvcm0vXG5cdFx0Zm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNoZWNrRm9ybSgpO1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuc3VibWl0dGVkLCB0aGlzLmVycm9yTWFwICk7XG5cdFx0XHR0aGlzLmludmFsaWQgPSAkLmV4dGVuZCgge30sIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdGlmICggIXRoaXMudmFsaWQoKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnRyaWdnZXJIYW5kbGVyKCBcImludmFsaWQtZm9ybVwiLCBbIHRoaXMgXSApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaG93RXJyb3JzKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHRjaGVja0Zvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBlbGVtZW50cyA9ICggdGhpcy5jdXJyZW50RWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKCkgKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHR0aGlzLmNoZWNrKCBlbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5lbGVtZW50L1xuXHRcdGVsZW1lbnQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIGNsZWFuRWxlbWVudCA9IHRoaXMuY2xlYW4oIGVsZW1lbnQgKSxcblx0XHRcdFx0Y2hlY2tFbGVtZW50ID0gdGhpcy52YWxpZGF0aW9uVGFyZ2V0Rm9yKCBjbGVhbkVsZW1lbnQgKSxcblx0XHRcdFx0diA9IHRoaXMsXG5cdFx0XHRcdHJlc3VsdCA9IHRydWUsXG5cdFx0XHRcdHJzLCBncm91cDtcblxuXHRcdFx0aWYgKCBjaGVja0VsZW1lbnQgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuaW52YWxpZFsgY2xlYW5FbGVtZW50Lm5hbWUgXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucHJlcGFyZUVsZW1lbnQoIGNoZWNrRWxlbWVudCApO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRFbGVtZW50cyA9ICQoIGNoZWNrRWxlbWVudCApO1xuXG5cdFx0XHRcdC8vIElmIHRoaXMgZWxlbWVudCBpcyBncm91cGVkLCB0aGVuIHZhbGlkYXRlIGFsbCBncm91cCBlbGVtZW50cyBhbHJlYWR5XG5cdFx0XHRcdC8vIGNvbnRhaW5pbmcgYSB2YWx1ZVxuXHRcdFx0XHRncm91cCA9IHRoaXMuZ3JvdXBzWyBjaGVja0VsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRpZiAoIGdyb3VwICkge1xuXHRcdFx0XHRcdCQuZWFjaCggdGhpcy5ncm91cHMsIGZ1bmN0aW9uKCBuYW1lLCB0ZXN0Z3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHRlc3Rncm91cCA9PT0gZ3JvdXAgJiYgbmFtZSAhPT0gY2hlY2tFbGVtZW50Lm5hbWUgKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFuRWxlbWVudCA9IHYudmFsaWRhdGlvblRhcmdldEZvciggdi5jbGVhbiggdi5maW5kQnlOYW1lKCBuYW1lICkgKSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNsZWFuRWxlbWVudCAmJiBjbGVhbkVsZW1lbnQubmFtZSBpbiB2LmludmFsaWQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0di5jdXJyZW50RWxlbWVudHMucHVzaCggY2xlYW5FbGVtZW50ICk7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gdi5jaGVjayggY2xlYW5FbGVtZW50ICkgJiYgcmVzdWx0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cnMgPSB0aGlzLmNoZWNrKCBjaGVja0VsZW1lbnQgKSAhPT0gZmFsc2U7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdCAmJiBycztcblx0XHRcdFx0aWYgKCBycyApIHtcblx0XHRcdFx0XHR0aGlzLmludmFsaWRbIGNoZWNrRWxlbWVudC5uYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmludmFsaWRbIGNoZWNrRWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhdGhpcy5udW1iZXJPZkludmFsaWRzKCkgKSB7XG5cblx0XHRcdFx0XHQvLyBIaWRlIGVycm9yIGNvbnRhaW5lcnMgb24gbGFzdCBlcnJvclxuXHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUuYWRkKCB0aGlzLmNvbnRhaW5lcnMgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblxuXHRcdFx0XHQvLyBBZGQgYXJpYS1pbnZhbGlkIHN0YXR1cyBmb3Igc2NyZWVuIHJlYWRlcnNcblx0XHRcdFx0JCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1pbnZhbGlkXCIsICFycyApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5zaG93RXJyb3JzL1xuXHRcdHNob3dFcnJvcnM6IGZ1bmN0aW9uKCBlcnJvcnMgKSB7XG5cdFx0XHRpZiAoIGVycm9ycyApIHtcblx0XHRcdFx0dmFyIHZhbGlkYXRvciA9IHRoaXM7XG5cblx0XHRcdFx0Ly8gQWRkIGl0ZW1zIHRvIGVycm9yIGxpc3QgYW5kIG1hcFxuXHRcdFx0XHQkLmV4dGVuZCggdGhpcy5lcnJvck1hcCwgZXJyb3JzICk7XG5cdFx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gJC5tYXAoIHRoaXMuZXJyb3JNYXAsIGZ1bmN0aW9uKCBtZXNzYWdlLCBuYW1lICkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRcdFx0ZWxlbWVudDogdmFsaWRhdG9yLmZpbmRCeU5hbWUoIG5hbWUgKVsgMCBdXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBpdGVtcyBmcm9tIHN1Y2Nlc3MgbGlzdFxuXHRcdFx0XHR0aGlzLnN1Y2Nlc3NMaXN0ID0gJC5ncmVwKCB0aGlzLnN1Y2Nlc3NMaXN0LCBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdFx0XHRyZXR1cm4gISggZWxlbWVudC5uYW1lIGluIGVycm9ycyApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc2hvd0Vycm9ycyApIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzLmNhbGwoIHRoaXMsIHRoaXMuZXJyb3JNYXAsIHRoaXMuZXJyb3JMaXN0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmRlZmF1bHRTaG93RXJyb3JzKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnJlc2V0Rm9ybS9cblx0XHRyZXNldEZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAkLmZuLnJlc2V0Rm9ybSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnJlc2V0Rm9ybSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwicHJldmlvdXNWYWx1ZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1pbnZhbGlkXCIgKTtcblxuXHRcdFx0dGhpcy5yZXNldEVsZW1lbnRzKCBlbGVtZW50cyApO1xuXHRcdH0sXG5cblx0XHRyZXNldEVsZW1lbnRzOiBmdW5jdGlvbiggZWxlbWVudHMgKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSxcblx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgXCJcIiApO1xuXHRcdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudHNbIGkgXS5uYW1lICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50c1xuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRudW1iZXJPZkludmFsaWRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm9iamVjdExlbmd0aCggdGhpcy5pbnZhbGlkICk7XG5cdFx0fSxcblxuXHRcdG9iamVjdExlbmd0aDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG5cdFx0XHR2YXIgY291bnQgPSAwLFxuXHRcdFx0XHRpO1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cblx0XHRcdFx0Ly8gVGhpcyBjaGVjayBhbGxvd3MgY291bnRpbmcgZWxlbWVudHMgd2l0aCBlbXB0eSBlcnJvclxuXHRcdFx0XHQvLyBtZXNzYWdlIGFzIGludmFsaWQgZWxlbWVudHNcblx0XHRcdFx0aWYgKCBvYmpbIGkgXSAhPT0gdW5kZWZpbmVkICYmIG9ialsgaSBdICE9PSBudWxsICYmIG9ialsgaSBdICE9PSBmYWxzZSApIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fSxcblxuXHRcdGhpZGVFcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5oaWRlVGhlc2UoIHRoaXMudG9IaWRlICk7XG5cdFx0fSxcblxuXHRcdGhpZGVUaGVzZTogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGVycm9ycy5ub3QoIHRoaXMuY29udGFpbmVycyApLnRleHQoIFwiXCIgKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggZXJyb3JzICkuaGlkZSgpO1xuXHRcdH0sXG5cblx0XHR2YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zaXplKCkgPT09IDA7XG5cdFx0fSxcblxuXHRcdHNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXJyb3JMaXN0Lmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0Zm9jdXNJbnZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5mb2N1c0ludmFsaWQgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0JCggdGhpcy5maW5kTGFzdEFjdGl2ZSgpIHx8IHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCAmJiB0aGlzLmVycm9yTGlzdFsgMCBdLmVsZW1lbnQgfHwgW10gKVxuXHRcdFx0XHRcdC5maWx0ZXIoIFwiOnZpc2libGVcIiApXG5cdFx0XHRcdFx0LnRyaWdnZXIoIFwiZm9jdXNcIiApXG5cblx0XHRcdFx0XHQvLyBNYW51YWxseSB0cmlnZ2VyIGZvY3VzaW4gZXZlbnQ7IHdpdGhvdXQgaXQsIGZvY3VzaW4gaGFuZGxlciBpc24ndCBjYWxsZWQsIGZpbmRMYXN0QWN0aXZlIHdvbid0IGhhdmUgYW55dGhpbmcgdG8gZmluZFxuXHRcdFx0XHRcdC50cmlnZ2VyKCBcImZvY3VzaW5cIiApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIElnbm9yZSBJRSB0aHJvd2luZyBlcnJvcnMgd2hlbiBmb2N1c2luZyBoaWRkZW4gZWxlbWVudHNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRmaW5kTGFzdEFjdGl2ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdEFjdGl2ZSA9IHRoaXMubGFzdEFjdGl2ZTtcblx0XHRcdHJldHVybiBsYXN0QWN0aXZlICYmICQuZ3JlcCggdGhpcy5lcnJvckxpc3QsIGZ1bmN0aW9uKCBuICkge1xuXHRcdFx0XHRyZXR1cm4gbi5lbGVtZW50Lm5hbWUgPT09IGxhc3RBY3RpdmUubmFtZTtcblx0XHRcdH0gKS5sZW5ndGggPT09IDEgJiYgbGFzdEFjdGl2ZTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHZhbGlkYXRvciA9IHRoaXMsXG5cdFx0XHRcdHJ1bGVzQ2FjaGUgPSB7fTtcblxuXHRcdFx0Ly8gU2VsZWN0IGFsbCB2YWxpZCBpbnB1dHMgaW5zaWRlIHRoZSBmb3JtIChubyBzdWJtaXQgb3IgcmVzZXQgYnV0dG9ucylcblx0XHRcdHJldHVybiAkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdC5maW5kKCBcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBbY29udGVudGVkaXRhYmxlXVwiIClcblx0XHRcdC5ub3QoIFwiOnN1Ym1pdCwgOnJlc2V0LCA6aW1hZ2UsIDpkaXNhYmxlZFwiIClcblx0XHRcdC5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClcblx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IHRoaXMubmFtZSB8fCAkKCB0aGlzICkuYXR0ciggXCJuYW1lXCIgKTsgLy8gRm9yIGNvbnRlbnRlZGl0YWJsZVxuXHRcdFx0XHR2YXIgaXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJCggdGhpcyApLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCI7XG5cblx0XHRcdFx0aWYgKCAhbmFtZSAmJiB2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggXCIlbyBoYXMgbm8gbmFtZSBhc3NpZ25lZFwiLCB0aGlzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgZm9ybSBleHBhbmRvIG9uIGNvbnRlbnRlZGl0YWJsZVxuXHRcdFx0XHRpZiAoIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElnbm9yZSBlbGVtZW50cyB0aGF0IGJlbG9uZyB0byBvdGhlci9uZXN0ZWQgZm9ybXNcblx0XHRcdFx0aWYgKCB0aGlzLmZvcm0gIT09IHZhbGlkYXRvci5jdXJyZW50Rm9ybSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZWxlY3Qgb25seSB0aGUgZmlyc3QgZWxlbWVudCBmb3IgZWFjaCBuYW1lLCBhbmQgb25seSB0aG9zZSB3aXRoIHJ1bGVzIHNwZWNpZmllZFxuXHRcdFx0XHRpZiAoIG5hbWUgaW4gcnVsZXNDYWNoZSB8fCAhdmFsaWRhdG9yLm9iamVjdExlbmd0aCggJCggdGhpcyApLnJ1bGVzKCkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRydWxlc0NhY2hlWyBuYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Y2xlYW46IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiAkKCBzZWxlY3RvciApWyAwIF07XG5cdFx0fSxcblxuXHRcdGVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXJyb3JDbGFzcyA9IHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcy5zcGxpdCggXCIgXCIgKS5qb2luKCBcIi5cIiApO1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuc2V0dGluZ3MuZXJyb3JFbGVtZW50ICsgXCIuXCIgKyBlcnJvckNsYXNzLCB0aGlzLmVycm9yQ29udGV4dCApO1xuXHRcdH0sXG5cblx0XHRyZXNldEludGVybmFsczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnN1Y2Nlc3NMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5lcnJvck1hcCA9IHt9O1xuXHRcdFx0dGhpcy50b1Nob3cgPSAkKCBbXSApO1xuXHRcdFx0dGhpcy50b0hpZGUgPSAkKCBbXSApO1xuXHRcdH0sXG5cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnJlc2V0SW50ZXJuYWxzKCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRFbGVtZW50cyA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVGb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnMoKS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdH0sXG5cblx0XHRwcmVwYXJlRWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICk7XG5cdFx0fSxcblxuXHRcdGVsZW1lbnRWYWx1ZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgJGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHRcdHR5cGUgPSBlbGVtZW50LnR5cGUsXG5cdFx0XHRcdGlzQ29udGVudEVkaXRhYmxlID0gdHlwZW9mICRlbGVtZW50LmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAkZWxlbWVudC5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwiZmFsc2VcIixcblx0XHRcdFx0dmFsLCBpZHg7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJyYWRpb1wiIHx8IHR5cGUgPT09IFwiY2hlY2tib3hcIiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuZmlsdGVyKCBcIjpjaGVja2VkXCIgKS52YWwoKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVsZW1lbnQudmFsaWRpdHkgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50LnZhbGlkaXR5LmJhZElucHV0ID8gXCJOYU5cIiA6ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0XHR2YWwgPSAkZWxlbWVudC50ZXh0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSAkZWxlbWVudC52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZpbGVcIiApIHtcblxuXHRcdFx0XHQvLyBNb2Rlcm4gYnJvd3NlciAoY2hyb21lICYgc2FmYXJpKVxuXHRcdFx0XHRpZiAoIHZhbC5zdWJzdHIoIDAsIDEyICkgPT09IFwiQzpcXFxcZmFrZXBhdGhcXFxcXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbC5zdWJzdHIoIDEyICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMZWdhY3kgYnJvd3NlcnNcblx0XHRcdFx0Ly8gVW5peC1iYXNlZCBwYXRoXG5cdFx0XHRcdGlkeCA9IHZhbC5sYXN0SW5kZXhPZiggXCIvXCIgKTtcblx0XHRcdFx0aWYgKCBpZHggPj0gMCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggaWR4ICsgMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2luZG93cy1iYXNlZCBwYXRoXG5cdFx0XHRcdGlkeCA9IHZhbC5sYXN0SW5kZXhPZiggXCJcXFxcXCIgKTtcblx0XHRcdFx0aWYgKCBpZHggPj0gMCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggaWR4ICsgMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSnVzdCB0aGUgZmlsZSBuYW1lXG5cdFx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHZhbC5yZXBsYWNlKCAvXFxyL2csIFwiXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fSxcblxuXHRcdGNoZWNrOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIHRoaXMuY2xlYW4oIGVsZW1lbnQgKSApO1xuXG5cdFx0XHR2YXIgcnVsZXMgPSAkKCBlbGVtZW50ICkucnVsZXMoKSxcblx0XHRcdFx0cnVsZXNDb3VudCA9ICQubWFwKCBydWxlcywgZnVuY3Rpb24oIG4sIGkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH0gKS5sZW5ndGgsXG5cdFx0XHRcdGRlcGVuZGVuY3lNaXNtYXRjaCA9IGZhbHNlLFxuXHRcdFx0XHR2YWwgPSB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApLFxuXHRcdFx0XHRyZXN1bHQsIG1ldGhvZCwgcnVsZSwgbm9ybWFsaXplcjtcblxuXHRcdFx0Ly8gUHJpb3JpdGl6ZSB0aGUgbG9jYWwgbm9ybWFsaXplciBkZWZpbmVkIGZvciB0aGlzIGVsZW1lbnQgb3ZlciB0aGUgZ2xvYmFsIG9uZVxuXHRcdFx0Ly8gaWYgdGhlIGZvcm1lciBleGlzdHMsIG90aGVyd2lzZSB1c2VyIHRoZSBnbG9iYWwgb25lIGluIGNhc2UgaXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0eXBlb2YgcnVsZXMubm9ybWFsaXplciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRub3JtYWxpemVyID0gcnVsZXMubm9ybWFsaXplcjtcblx0XHRcdH0gZWxzZSBpZiAoXHR0eXBlb2YgdGhpcy5zZXR0aW5ncy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIG5vcm1hbGl6ZXIgaXMgZGVmaW5lZCwgdGhlbiBjYWxsIGl0IHRvIHJldHJlaXZlIHRoZSBjaGFuZ2VkIHZhbHVlIGluc3RlYWRcblx0XHRcdC8vIG9mIHVzaW5nIHRoZSByZWFsIG9uZS5cblx0XHRcdC8vIE5vdGUgdGhhdCBgdGhpc2AgaW4gdGhlIG5vcm1hbGl6ZXIgaXMgYGVsZW1lbnRgLlxuXHRcdFx0aWYgKCBub3JtYWxpemVyICkge1xuXHRcdFx0XHR2YWwgPSBub3JtYWxpemVyLmNhbGwoIGVsZW1lbnQsIHZhbCApO1xuXG5cdFx0XHRcdC8vIERlbGV0ZSB0aGUgbm9ybWFsaXplciBmcm9tIHJ1bGVzIHRvIGF2b2lkIHRyZWF0aW5nIGl0IGFzIGEgcHJlLWRlZmluZWQgbWV0aG9kLlxuXHRcdFx0XHRkZWxldGUgcnVsZXMubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbWV0aG9kIGluIHJ1bGVzICkge1xuXHRcdFx0XHRydWxlID0geyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1ldGVyczogcnVsZXNbIG1ldGhvZCBdIH07XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gJC52YWxpZGF0b3IubWV0aG9kc1sgbWV0aG9kIF0uY2FsbCggdGhpcywgdmFsLCBlbGVtZW50LCBydWxlLnBhcmFtZXRlcnMgKTtcblxuXHRcdFx0XHRcdC8vIElmIGEgbWV0aG9kIGluZGljYXRlcyB0aGF0IHRoZSBmaWVsZCBpcyBvcHRpb25hbCBhbmQgdGhlcmVmb3JlIHZhbGlkLFxuXHRcdFx0XHRcdC8vIGRvbid0IG1hcmsgaXQgYXMgdmFsaWQgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgcnVsZXNcblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCIgJiYgcnVsZXNDb3VudCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdGRlcGVuZGVuY3lNaXNtYXRjaCA9IHRydWU7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJwZW5kaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMudG9IaWRlLm5vdCggdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggIXJlc3VsdCApIHtcblx0XHRcdFx0XHRcdHRoaXMuZm9ybWF0QW5kQWRkKCBlbGVtZW50LCBydWxlICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyggXCJFeGNlcHRpb24gb2NjdXJyZWQgd2hlbiBjaGVja2luZyBlbGVtZW50IFwiICsgZWxlbWVudC5pZCArIFwiLCBjaGVjayB0aGUgJ1wiICsgcnVsZS5tZXRob2QgKyBcIicgbWV0aG9kLlwiLCBlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggZSBpbnN0YW5jZW9mIFR5cGVFcnJvciApIHtcblx0XHRcdFx0XHRcdGUubWVzc2FnZSArPSBcIi4gIEV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBkZXBlbmRlbmN5TWlzbWF0Y2ggKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5vYmplY3RMZW5ndGgoIHJ1bGVzICkgKSB7XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IGFuZCB2YWxpZGF0aW9uIG1ldGhvZFxuXHRcdC8vIHNwZWNpZmllZCBpbiB0aGUgZWxlbWVudCdzIEhUTUw1IGRhdGEgYXR0cmlidXRlXG5cdFx0Ly8gcmV0dXJuIHRoZSBnZW5lcmljIG1lc3NhZ2UgaWYgcHJlc2VudCBhbmQgbm8gbWV0aG9kIHNwZWNpZmljIG1lc3NhZ2UgaXMgcHJlc2VudFxuXHRcdGN1c3RvbURhdGFNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApIHx8ICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICk7XG5cdFx0fSxcblxuXHRcdC8vIFJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IG5hbWUgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Y3VzdG9tTWVzc2FnZTogZnVuY3Rpb24oIG5hbWUsIG1ldGhvZCApIHtcblx0XHRcdHZhciBtID0gdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgbmFtZSBdO1xuXHRcdFx0cmV0dXJuIG0gJiYgKCBtLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgPyBtIDogbVsgbWV0aG9kIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBmaXJzdCBkZWZpbmVkIGFyZ3VtZW50LCBhbGxvd2luZyBlbXB0eSBzdHJpbmdzXG5cdFx0ZmluZERlZmluZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50c1sgaSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH0sXG5cblx0XHQvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciAncnVsZScgdXNlZCB0byBiZSBhIHN0cmluZywgYW5kIGV4dGVuZGVkIHRvIGFuIG9iamVjdCBsaXRlcmFsXG5cdFx0Ly8gb2YgdGhlIGZvbGxvd2luZyBmb3JtOlxuXHRcdC8vIHJ1bGUgPSB7XG5cdFx0Ly8gICAgIG1ldGhvZDogXCJtZXRob2QgbmFtZVwiLFxuXHRcdC8vICAgICBwYXJhbWV0ZXJzOiBcInRoZSBnaXZlbiBtZXRob2QgcGFyYW1ldGVyc1wiXG5cdFx0Ly8gfVxuXHRcdC8vXG5cdFx0Ly8gVGhlIG9sZCBiZWhhdmlvciBzdGlsbCBzdXBwb3J0ZWQsIGtlcHQgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoXG5cdFx0Ly8gb2xkIGNvZGUsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0XHRkZWZhdWx0TWVzc2FnZTogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRydWxlID0geyBtZXRob2Q6IHJ1bGUgfTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLmZpbmREZWZpbmVkKFxuXHRcdFx0XHRcdHRoaXMuY3VzdG9tTWVzc2FnZSggZWxlbWVudC5uYW1lLCBydWxlLm1ldGhvZCApLFxuXHRcdFx0XHRcdHRoaXMuY3VzdG9tRGF0YU1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUubWV0aG9kICksXG5cblx0XHRcdFx0XHQvLyAndGl0bGUnIGlzIG5ldmVyIHVuZGVmaW5lZCwgc28gaGFuZGxlIGVtcHR5IHN0cmluZyBhcyB1bmRlZmluZWRcblx0XHRcdFx0XHQhdGhpcy5zZXR0aW5ncy5pZ25vcmVUaXRsZSAmJiBlbGVtZW50LnRpdGxlIHx8IHVuZGVmaW5lZCxcblx0XHRcdFx0XHQkLnZhbGlkYXRvci5tZXNzYWdlc1sgcnVsZS5tZXRob2QgXSxcblx0XHRcdFx0XHRcIjxzdHJvbmc+V2FybmluZzogTm8gbWVzc2FnZSBkZWZpbmVkIGZvciBcIiArIGVsZW1lbnQubmFtZSArIFwiPC9zdHJvbmc+XCJcblx0XHRcdFx0KSxcblx0XHRcdFx0dGhlcmVnZXggPSAvXFwkP1xceyhcXGQrKVxcfS9nO1xuXHRcdFx0aWYgKCB0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRtZXNzYWdlID0gbWVzc2FnZS5jYWxsKCB0aGlzLCBydWxlLnBhcmFtZXRlcnMsIGVsZW1lbnQgKTtcblx0XHRcdH0gZWxzZSBpZiAoIHRoZXJlZ2V4LnRlc3QoIG1lc3NhZ2UgKSApIHtcblx0XHRcdFx0bWVzc2FnZSA9ICQudmFsaWRhdG9yLmZvcm1hdCggbWVzc2FnZS5yZXBsYWNlKCB0aGVyZWdleCwgXCJ7JDF9XCIgKSwgcnVsZS5wYXJhbWV0ZXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRmb3JtYXRBbmRBZGQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBydWxlICkge1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCBydWxlICk7XG5cblx0XHRcdHRoaXMuZXJyb3JMaXN0LnB1c2goIHtcblx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSxcblx0XHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdFx0bWV0aG9kOiBydWxlLm1ldGhvZFxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmVycm9yTWFwWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZFsgZWxlbWVudC5uYW1lIF0gPSBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRhZGRXcmFwcGVyOiBmdW5jdGlvbiggdG9Ub2dnbGUgKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblx0XHRcdFx0dG9Ub2dnbGUgPSB0b1RvZ2dsZS5hZGQoIHRvVG9nZ2xlLnBhcmVudCggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0b1RvZ2dsZTtcblx0XHR9LFxuXG5cdFx0ZGVmYXVsdFNob3dFcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGksIGVsZW1lbnRzLCBlcnJvcjtcblx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLmVycm9yTGlzdFsgaSBdOyBpKysgKSB7XG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvckxpc3RbIGkgXTtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlcnJvci5lbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCBlcnJvci5lbGVtZW50LCBlcnJvci5tZXNzYWdlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNob3dMYWJlbCggdGhpcy5zdWNjZXNzTGlzdFsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGVsZW1lbnRzID0gdGhpcy52YWxpZEVsZW1lbnRzKCk7IGVsZW1lbnRzWyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnRzWyBpIF0sIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLnRvU2hvdyApO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR0aGlzLmFkZFdyYXBwZXIoIHRoaXMudG9TaG93ICkuc2hvdygpO1xuXHRcdH0sXG5cblx0XHR2YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRFbGVtZW50cy5ub3QoIHRoaXMuaW52YWxpZEVsZW1lbnRzKCkgKTtcblx0XHR9LFxuXG5cdFx0aW52YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkKCB0aGlzLmVycm9yTGlzdCApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdHNob3dMYWJlbDogZnVuY3Rpb24oIGVsZW1lbnQsIG1lc3NhZ2UgKSB7XG5cdFx0XHR2YXIgcGxhY2UsIGdyb3VwLCBlcnJvcklELCB2LFxuXHRcdFx0XHRlcnJvciA9IHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICksXG5cdFx0XHRcdGVsZW1lbnRJRCA9IHRoaXMuaWRPck5hbWUoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZGVzY3JpYmVkQnkgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKTtcblxuXHRcdFx0aWYgKCBlcnJvci5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gUmVmcmVzaCBlcnJvci9zdWNjZXNzIGNsYXNzXG5cdFx0XHRcdGVycm9yLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzICk7XG5cblx0XHRcdFx0Ly8gUmVwbGFjZSBtZXNzYWdlIG9uIGV4aXN0aW5nIGxhYmVsXG5cdFx0XHRcdGVycm9yLmh0bWwoIG1lc3NhZ2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIGVycm9yIGVsZW1lbnRcblx0XHRcdFx0ZXJyb3IgPSAkKCBcIjxcIiArIHRoaXMuc2V0dGluZ3MuZXJyb3JFbGVtZW50ICsgXCI+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBcImlkXCIsIGVsZW1lbnRJRCArIFwiLWVycm9yXCIgKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzIClcblx0XHRcdFx0XHQuaHRtbCggbWVzc2FnZSB8fCBcIlwiICk7XG5cblx0XHRcdFx0Ly8gTWFpbnRhaW4gcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHRvIGJlIHBsYWNlZCBpbnRvIHRoZSBET01cblx0XHRcdFx0cGxhY2UgPSBlcnJvcjtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSwgZXZlbiBpbiBJRVxuXHRcdFx0XHRcdC8vIGFjdHVhbGx5IHNob3dpbmcgdGhlIHdyYXBwZWQgZWxlbWVudCBpcyBoYW5kbGVkIGVsc2V3aGVyZVxuXHRcdFx0XHRcdHBsYWNlID0gZXJyb3IuaGlkZSgpLnNob3coKS53cmFwKCBcIjxcIiArIHRoaXMuc2V0dGluZ3Mud3JhcHBlciArIFwiLz5cIiApLnBhcmVudCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5sYWJlbENvbnRhaW5lci5hcHBlbmQoIHBsYWNlICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuc2V0dGluZ3MuZXJyb3JQbGFjZW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudC5jYWxsKCB0aGlzLCBwbGFjZSwgJCggZWxlbWVudCApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGxhY2UuaW5zZXJ0QWZ0ZXIoIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExpbmsgZXJyb3IgYmFjayB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoIGVycm9yLmlzKCBcImxhYmVsXCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBlcnJvciBpcyBhIGxhYmVsLCB0aGVuIGFzc29jaWF0ZSB1c2luZyAnZm9yJ1xuXHRcdFx0XHRcdGVycm9yLmF0dHIoIFwiZm9yXCIsIGVsZW1lbnRJRCApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaXMgbm90IGEgY2hpbGQgb2YgYW4gYXNzb2NpYXRlZCBsYWJlbCwgdGhlbiBpdCdzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdC8vIHRvIGV4cGxpY2l0bHkgYXBwbHkgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHR9IGVsc2UgaWYgKCBlcnJvci5wYXJlbnRzKCBcImxhYmVsW2Zvcj0nXCIgKyB0aGlzLmVzY2FwZUNzc01ldGEoIGVsZW1lbnRJRCApICsgXCInXVwiICkubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRcdGVycm9ySUQgPSBlcnJvci5hdHRyKCBcImlkXCIgKTtcblxuXHRcdFx0XHRcdC8vIFJlc3BlY3QgZXhpc3Rpbmcgbm9uLWVycm9yIGFyaWEtZGVzY3JpYmVkYnlcblx0XHRcdFx0XHRpZiAoICFkZXNjcmliZWRCeSApIHtcblx0XHRcdFx0XHRcdGRlc2NyaWJlZEJ5ID0gZXJyb3JJRDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhZGVzY3JpYmVkQnkubWF0Y2goIG5ldyBSZWdFeHAoIFwiXFxcXGJcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZXJyb3JJRCApICsgXCJcXFxcYlwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWRkIHRvIGVuZCBvZiBsaXN0IGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcblx0XHRcdFx0XHRcdGRlc2NyaWJlZEJ5ICs9IFwiIFwiICsgZXJyb3JJRDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBkZXNjcmliZWRCeSApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gYXNzaWduIHRvIGFsbCBlbGVtZW50cyBpbiB0aGUgc2FtZSBncm91cFxuXHRcdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0XHR2ID0gdGhpcztcblx0XHRcdFx0XHRcdCQuZWFjaCggdi5ncm91cHMsIGZ1bmN0aW9uKCBuYW1lLCB0ZXN0Z3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCApIHtcblx0XHRcdFx0XHRcdFx0XHQkKCBcIltuYW1lPSdcIiArIHYuZXNjYXBlQ3NzTWV0YSggbmFtZSApICsgXCInXVwiLCB2LmN1cnJlbnRGb3JtIClcblx0XHRcdFx0XHRcdFx0XHRcdC5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiwgZXJyb3IuYXR0ciggXCJpZFwiICkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCAhbWVzc2FnZSAmJiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdGVycm9yLnRleHQoIFwiXCIgKTtcblx0XHRcdFx0aWYgKCB0eXBlb2YgdGhpcy5zZXR0aW5ncy5zdWNjZXNzID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdGVycm9yLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnN1Y2Nlc3MoIGVycm9yLCBlbGVtZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudG9TaG93ID0gdGhpcy50b1Nob3cuYWRkKCBlcnJvciApO1xuXHRcdH0sXG5cblx0XHRlcnJvcnNGb3I6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIG5hbWUgPSB0aGlzLmVzY2FwZUNzc01ldGEoIHRoaXMuaWRPck5hbWUoIGVsZW1lbnQgKSApLFxuXHRcdFx0XHRkZXNjcmliZXIgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKSxcblx0XHRcdFx0c2VsZWN0b3IgPSBcImxhYmVsW2Zvcj0nXCIgKyBuYW1lICsgXCInXSwgbGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddICpcIjtcblxuXHRcdFx0Ly8gJ2FyaWEtZGVzY3JpYmVkYnknIHNob3VsZCBkaXJlY3RseSByZWZlcmVuY2UgdGhlIGVycm9yIGVsZW1lbnRcblx0XHRcdGlmICggZGVzY3JpYmVyICkge1xuXHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yICsgXCIsICNcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZGVzY3JpYmVyIClcblx0XHRcdFx0XHQucmVwbGFjZSggL1xccysvZywgXCIsICNcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0XHQuZXJyb3JzKClcblx0XHRcdFx0LmZpbHRlciggc2VsZWN0b3IgKTtcblx0XHR9LFxuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vY2F0ZWdvcnkvc2VsZWN0b3JzLywgZm9yIENTU1xuXHRcdC8vIG1ldGEtY2hhcmFjdGVycyB0aGF0IHNob3VsZCBiZSBlc2NhcGVkIGluIG9yZGVyIHRvIGJlIHVzZWQgd2l0aCBKUXVlcnlcblx0XHQvLyBhcyBhIGxpdGVyYWwgcGFydCBvZiBhIG5hbWUvaWQgb3IgYW55IHNlbGVjdG9yLlxuXHRcdGVzY2FwZUNzc01ldGE6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIC8oW1xcXFwhXCIjJCUmJygpKissLi86Ozw9Pj9AXFxbXFxdXmB7fH1+XSkvZywgXCJcXFxcJDFcIiApO1xuXHRcdH0sXG5cblx0XHRpZE9yTmFtZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHNbIGVsZW1lbnQubmFtZSBdIHx8ICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSA/IGVsZW1lbnQubmFtZSA6IGVsZW1lbnQuaWQgfHwgZWxlbWVudC5uYW1lICk7XG5cdFx0fSxcblxuXHRcdHZhbGlkYXRpb25UYXJnZXRGb3I6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBJZiByYWRpby9jaGVja2JveCwgdmFsaWRhdGUgZmlyc3QgZWxlbWVudCBpbiBncm91cCBpbnN0ZWFkXG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBbHdheXMgYXBwbHkgaWdub3JlIGZpbHRlclxuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKS5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0Y2hlY2thYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiAoIC9yYWRpb3xjaGVja2JveC9pICkudGVzdCggZWxlbWVudC50eXBlICk7XG5cdFx0fSxcblxuXHRcdGZpbmRCeU5hbWU6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKS5maW5kKCBcIltuYW1lPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggbmFtZSApICsgXCInXVwiICk7XG5cdFx0fSxcblxuXHRcdGdldExlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0c3dpdGNoICggZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0Y2FzZSBcInNlbGVjdFwiOlxuXHRcdFx0XHRyZXR1cm4gJCggXCJvcHRpb246c2VsZWN0ZWRcIiwgZWxlbWVudCApLmxlbmd0aDtcblx0XHRcdGNhc2UgXCJpbnB1dFwiOlxuXHRcdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuZmlsdGVyKCBcIjpjaGVja2VkXCIgKS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZS5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdGRlcGVuZDogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGVwZW5kVHlwZXNbIHR5cGVvZiBwYXJhbSBdID8gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0oIHBhcmFtLCBlbGVtZW50ICkgOiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZXBlbmRUeXBlczoge1xuXHRcdFx0XCJib29sZWFuXCI6IGZ1bmN0aW9uKCBwYXJhbSApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtO1xuXHRcdFx0fSxcblx0XHRcdFwic3RyaW5nXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuICEhJCggcGFyYW0sIGVsZW1lbnQuZm9ybSApLmxlbmd0aDtcblx0XHRcdH0sXG5cdFx0XHRcImZ1bmN0aW9uXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9wdGlvbmFsOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciB2YWwgPSB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuICEkLnZhbGlkYXRvci5tZXRob2RzLnJlcXVpcmVkLmNhbGwoIHRoaXMsIHZhbCwgZWxlbWVudCApICYmIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdH0sXG5cblx0XHRzdGFydFJlcXVlc3Q6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdCsrO1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzdG9wUmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQsIHZhbGlkICkge1xuXHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdC0tO1xuXG5cdFx0XHQvLyBTb21ldGltZXMgc3luY2hyb25pemF0aW9uIGZhaWxzLCBtYWtlIHN1cmUgcGVuZGluZ1JlcXVlc3QgaXMgbmV2ZXIgPCAwXG5cdFx0XHRpZiAoIHRoaXMucGVuZGluZ1JlcXVlc3QgPCAwICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdH1cblx0XHRcdGRlbGV0ZSB0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0JCggZWxlbWVudCApLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnBlbmRpbmdDbGFzcyApO1xuXHRcdFx0aWYgKCB2YWxpZCAmJiB0aGlzLnBlbmRpbmdSZXF1ZXN0ID09PSAwICYmIHRoaXMuZm9ybVN1Ym1pdHRlZCAmJiB0aGlzLmZvcm0oKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnN1Ym1pdCgpO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSB0aGUgaGlkZGVuIGlucHV0IHRoYXQgd2FzIHVzZWQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlXG5cdFx0XHRcdC8vIG1pc3Npbmcgc3VibWl0IGJ1dHRvbi4gVGhlIGhpZGRlbiBpbnB1dCBpcyBhZGRlZCBieSBgaGFuZGxlKClgXG5cdFx0XHRcdC8vIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBvZiB0aGUgdXNlZCBzdWJtaXQgYnV0dG9uIGlzIHBhc3NlZCBvblxuXHRcdFx0XHQvLyBmb3Igc2NyaXB0ZWQgc3VibWl0cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2Rcblx0XHRcdFx0aWYgKCB0aGlzLnN1Ym1pdEJ1dHRvbiApIHtcblx0XHRcdFx0XHQkKCBcImlucHV0OmhpZGRlbltuYW1lPSdcIiArIHRoaXMuc3VibWl0QnV0dG9uLm5hbWUgKyBcIiddXCIsIHRoaXMuY3VycmVudEZvcm0gKS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggIXZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcmV2aW91c1ZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0bWV0aG9kID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiBtZXRob2QgfHwgXCJyZW1vdGVcIjtcblxuXHRcdFx0cmV0dXJuICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIgKSB8fCAkLmRhdGEoIGVsZW1lbnQsIFwicHJldmlvdXNWYWx1ZVwiLCB7XG5cdFx0XHRcdG9sZDogbnVsbCxcblx0XHRcdFx0dmFsaWQ6IHRydWUsXG5cdFx0XHRcdG1lc3NhZ2U6IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHsgbWV0aG9kOiBtZXRob2QgfSApXG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdC8vIENsZWFucyB1cCBhbGwgZm9ybXMgYW5kIGVsZW1lbnRzLCByZW1vdmVzIHZhbGlkYXRvci1zcGVjaWZpYyBldmVudHNcblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRGb3JtKCk7XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZVwiIClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwidmFsaWRhdG9yXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlLWVxdWFsVG9cIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWVxdWFsVG8tYmx1clwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnZhbGlkYXRlLWxlc3NUaGFuLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtbGVzc1RoYW5cIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWxlc3NUaGFuLWJsdXJcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1sZXNzVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtbGVzc1RoYW5FcXVhbFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW5FcXVhbC1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbC1ibHVyXCIgKVxuXHRcdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlLWdyZWF0ZXJUaGFuRXF1YWxcIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWdyZWF0ZXJUaGFuRXF1YWwtYmx1clwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnZhbGlkYXRlLWdyZWF0ZXJUaGFuLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5cIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWdyZWF0ZXJUaGFuLWJsdXJcIiApO1xuXHRcdH1cblxuXHR9LFxuXG5cdGNsYXNzUnVsZVNldHRpbmdzOiB7XG5cdFx0cmVxdWlyZWQ6IHsgcmVxdWlyZWQ6IHRydWUgfSxcblx0XHRlbWFpbDogeyBlbWFpbDogdHJ1ZSB9LFxuXHRcdHVybDogeyB1cmw6IHRydWUgfSxcblx0XHRkYXRlOiB7IGRhdGU6IHRydWUgfSxcblx0XHRkYXRlSVNPOiB7IGRhdGVJU086IHRydWUgfSxcblx0XHRudW1iZXI6IHsgbnVtYmVyOiB0cnVlIH0sXG5cdFx0ZGlnaXRzOiB7IGRpZ2l0czogdHJ1ZSB9LFxuXHRcdGNyZWRpdGNhcmQ6IHsgY3JlZGl0Y2FyZDogdHJ1ZSB9XG5cdH0sXG5cblx0YWRkQ2xhc3NSdWxlczogZnVuY3Rpb24oIGNsYXNzTmFtZSwgcnVsZXMgKSB7XG5cdFx0aWYgKCBjbGFzc05hbWUuY29uc3RydWN0b3IgPT09IFN0cmluZyApIHtcblx0XHRcdHRoaXMuY2xhc3NSdWxlU2V0dGluZ3NbIGNsYXNzTmFtZSBdID0gcnVsZXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXh0ZW5kKCB0aGlzLmNsYXNzUnVsZVNldHRpbmdzLCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Y2xhc3NSdWxlczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHJ1bGVzID0ge30sXG5cdFx0XHRjbGFzc2VzID0gJCggZWxlbWVudCApLmF0dHIoIFwiY2xhc3NcIiApO1xuXG5cdFx0aWYgKCBjbGFzc2VzICkge1xuXHRcdFx0JC5lYWNoKCBjbGFzc2VzLnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzIGluICQudmFsaWRhdG9yLmNsYXNzUnVsZVNldHRpbmdzICkge1xuXHRcdFx0XHRcdCQuZXh0ZW5kKCBydWxlcywgJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3NbIHRoaXMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVBdHRyaWJ1dGVSdWxlOiBmdW5jdGlvbiggcnVsZXMsIHR5cGUsIG1ldGhvZCwgdmFsdWUgKSB7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byBhIG51bWJlciBmb3IgbnVtYmVyIGlucHV0cywgYW5kIGZvciB0ZXh0IGZvciBiYWNrd2FyZHMgY29tcGFiaWxpdHlcblx0XHQvLyBhbGxvd3MgdHlwZT1cImRhdGVcIiBhbmQgb3RoZXJzIHRvIGJlIGNvbXBhcmVkIGFzIHN0cmluZ3Ncblx0XHRpZiAoIC9taW58bWF4fHN0ZXAvLnRlc3QoIG1ldGhvZCApICYmICggdHlwZSA9PT0gbnVsbCB8fCAvbnVtYmVyfHJhbmdlfHRleHQvLnRlc3QoIHR5cGUgKSApICkge1xuXHRcdFx0dmFsdWUgPSBOdW1iZXIoIHZhbHVlICk7XG5cblx0XHRcdC8vIFN1cHBvcnQgT3BlcmEgTWluaSwgd2hpY2ggcmV0dXJucyBOYU4gZm9yIHVuZGVmaW5lZCBtaW5sZW5ndGhcblx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cdFx0XHRcdHZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgfHwgdmFsdWUgPT09IDAgKSB7XG5cdFx0XHRydWxlc1sgbWV0aG9kIF0gPSB2YWx1ZTtcblx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBtZXRob2QgJiYgdHlwZSAhPT0gXCJyYW5nZVwiICkge1xuXG5cdFx0XHQvLyBFeGNlcHRpb246IHRoZSBqcXVlcnkgdmFsaWRhdGUgJ3JhbmdlJyBtZXRob2Rcblx0XHRcdC8vIGRvZXMgbm90IHRlc3QgZm9yIHRoZSBodG1sNSAncmFuZ2UnIHR5cGVcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHRydWU7XG5cdFx0fVxuXHR9LFxuXG5cdGF0dHJpYnV0ZVJ1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdCRlbGVtZW50ID0gJCggZWxlbWVudCApLFxuXHRcdFx0dHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApLFxuXHRcdFx0bWV0aG9kLCB2YWx1ZTtcblxuXHRcdGZvciAoIG1ldGhvZCBpbiAkLnZhbGlkYXRvci5tZXRob2RzICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGZvciA8aW5wdXQgcmVxdWlyZWQ+IGluIGJvdGggaHRtbDUgYW5kIG9sZGVyIGJyb3dzZXJzXG5cdFx0XHRpZiAoIG1ldGhvZCA9PT0gXCJyZXF1aXJlZFwiICkge1xuXHRcdFx0XHR2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCBtZXRob2QgKTtcblxuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIHJldHVybiBhbiBlbXB0eSBzdHJpbmcgZm9yIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVcblx0XHRcdFx0Ly8gYW5kIG5vbi1IVE1MNSBicm93c2VycyBtaWdodCBoYXZlIHJlcXVpcmVkPVwiXCIgbWFya3VwXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2Ugbm9uLUhUTUw1IGJyb3dzZXJzIHRvIHJldHVybiBib29sXG5cdFx0XHRcdHZhbHVlID0gISF2YWx1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gJGVsZW1lbnQuYXR0ciggbWV0aG9kICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubm9ybWFsaXplQXR0cmlidXRlUnVsZSggcnVsZXMsIHR5cGUsIG1ldGhvZCwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyAnbWF4bGVuZ3RoJyBtYXkgYmUgcmV0dXJuZWQgYXMgLTEsIDIxNDc0ODM2NDcgKCBJRSApIGFuZCA1MjQyODggKCBzYWZhcmkgKSBmb3IgdGV4dCBpbnB1dHNcblx0XHRpZiAoIHJ1bGVzLm1heGxlbmd0aCAmJiAvLTF8MjE0NzQ4MzY0N3w1MjQyODgvLnRlc3QoIHJ1bGVzLm1heGxlbmd0aCApICkge1xuXHRcdFx0ZGVsZXRlIHJ1bGVzLm1heGxlbmd0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0ZGF0YVJ1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdCRlbGVtZW50ID0gJCggZWxlbWVudCApLFxuXHRcdFx0dHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApLFxuXHRcdFx0bWV0aG9kLCB2YWx1ZTtcblxuXHRcdGZvciAoIG1ldGhvZCBpbiAkLnZhbGlkYXRvci5tZXRob2RzICkge1xuXHRcdFx0dmFsdWUgPSAkZWxlbWVudC5kYXRhKCBcInJ1bGVcIiArIG1ldGhvZC5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgbWV0aG9kLnN1YnN0cmluZyggMSApLnRvTG93ZXJDYXNlKCkgKTtcblxuXHRcdFx0Ly8gQ2FzdCBlbXB0eSBhdHRyaWJ1dGVzIGxpa2UgYGRhdGEtcnVsZS1yZXF1aXJlZGAgdG8gYHRydWVgXG5cdFx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xuXHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubm9ybWFsaXplQXR0cmlidXRlUnVsZSggcnVsZXMsIHR5cGUsIG1ldGhvZCwgdmFsdWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdHN0YXRpY1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdHZhbGlkYXRvciA9ICQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICk7XG5cblx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5ydWxlcyApIHtcblx0XHRcdHJ1bGVzID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzWyBlbGVtZW50Lm5hbWUgXSApIHx8IHt9O1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0bm9ybWFsaXplUnVsZXM6IGZ1bmN0aW9uKCBydWxlcywgZWxlbWVudCApIHtcblxuXHRcdC8vIEhhbmRsZSBkZXBlbmRlbmN5IGNoZWNrXG5cdFx0JC5lYWNoKCBydWxlcywgZnVuY3Rpb24oIHByb3AsIHZhbCApIHtcblxuXHRcdFx0Ly8gSWdub3JlIHJ1bGUgd2hlbiBwYXJhbSBpcyBleHBsaWNpdGx5IGZhbHNlLCBlZy4gcmVxdWlyZWQ6ZmFsc2Vcblx0XHRcdGlmICggdmFsID09PSBmYWxzZSApIHtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzWyBwcm9wIF07XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggdmFsLnBhcmFtIHx8IHZhbC5kZXBlbmRzICkge1xuXHRcdFx0XHR2YXIga2VlcFJ1bGUgPSB0cnVlO1xuXHRcdFx0XHRzd2l0Y2ggKCB0eXBlb2YgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9ICEhJCggdmFsLmRlcGVuZHMsIGVsZW1lbnQuZm9ybSApLmxlbmd0aDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0a2VlcFJ1bGUgPSB2YWwuZGVwZW5kcy5jYWxsKCBlbGVtZW50LCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBrZWVwUnVsZSApIHtcblx0XHRcdFx0XHRydWxlc1sgcHJvcCBdID0gdmFsLnBhcmFtICE9PSB1bmRlZmluZWQgPyB2YWwucGFyYW0gOiB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICkucmVzZXRFbGVtZW50cyggJCggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0ZGVsZXRlIHJ1bGVzWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvLyBFdmFsdWF0ZSBwYXJhbWV0ZXJzXG5cdFx0JC5lYWNoKCBydWxlcywgZnVuY3Rpb24oIHJ1bGUsIHBhcmFtZXRlciApIHtcblx0XHRcdHJ1bGVzWyBydWxlIF0gPSAkLmlzRnVuY3Rpb24oIHBhcmFtZXRlciApICYmIHJ1bGUgIT09IFwibm9ybWFsaXplclwiID8gcGFyYW1ldGVyKCBlbGVtZW50ICkgOiBwYXJhbWV0ZXI7XG5cdFx0fSApO1xuXG5cdFx0Ly8gQ2xlYW4gbnVtYmVyIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIFsgXCJtaW5sZW5ndGhcIiwgXCJtYXhsZW5ndGhcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0cnVsZXNbIHRoaXMgXSA9IE51bWJlciggcnVsZXNbIHRoaXMgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHQkLmVhY2goIFsgXCJyYW5nZWxlbmd0aFwiLCBcInJhbmdlXCIgXSwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcGFydHM7XG5cdFx0XHRpZiAoIHJ1bGVzWyB0aGlzIF0gKSB7XG5cdFx0XHRcdGlmICggJC5pc0FycmF5KCBydWxlc1sgdGhpcyBdICkgKSB7XG5cdFx0XHRcdFx0cnVsZXNbIHRoaXMgXSA9IFsgTnVtYmVyKCBydWxlc1sgdGhpcyBdWyAwIF0gKSwgTnVtYmVyKCBydWxlc1sgdGhpcyBdWyAxIF0gKSBdO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgcnVsZXNbIHRoaXMgXSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRwYXJ0cyA9IHJ1bGVzWyB0aGlzIF0ucmVwbGFjZSggL1tcXFtcXF1dL2csIFwiXCIgKS5zcGxpdCggL1tcXHMsXSsvICk7XG5cdFx0XHRcdFx0cnVsZXNbIHRoaXMgXSA9IFsgTnVtYmVyKCBwYXJ0c1sgMCBdICksIE51bWJlciggcGFydHNbIDEgXSApIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRpZiAoICQudmFsaWRhdG9yLmF1dG9DcmVhdGVSYW5nZXMgKSB7XG5cblx0XHRcdC8vIEF1dG8tY3JlYXRlIHJhbmdlc1xuXHRcdFx0aWYgKCBydWxlcy5taW4gIT0gbnVsbCAmJiBydWxlcy5tYXggIT0gbnVsbCApIHtcblx0XHRcdFx0cnVsZXMucmFuZ2UgPSBbIHJ1bGVzLm1pbiwgcnVsZXMubWF4IF07XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5taW47XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5tYXg7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHJ1bGVzLm1pbmxlbmd0aCAhPSBudWxsICYmIHJ1bGVzLm1heGxlbmd0aCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZWxlbmd0aCA9IFsgcnVsZXMubWlubGVuZ3RoLCBydWxlcy5tYXhsZW5ndGggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbmxlbmd0aDtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heGxlbmd0aDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0Ly8gQ29udmVydHMgYSBzaW1wbGUgc3RyaW5nIHRvIGEge3N0cmluZzogdHJ1ZX0gcnVsZSwgZS5nLiwgXCJyZXF1aXJlZFwiIHRvIHtyZXF1aXJlZDp0cnVlfVxuXHRub3JtYWxpemVSdWxlOiBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dmFyIHRyYW5zZm9ybWVkID0ge307XG5cdFx0XHQkLmVhY2goIGRhdGEuc3BsaXQoIC9cXHMvICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0cmFuc2Zvcm1lZFsgdGhpcyBdID0gdHJ1ZTtcblx0XHRcdH0gKTtcblx0XHRcdGRhdGEgPSB0cmFuc2Zvcm1lZDtcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLmFkZE1ldGhvZC9cblx0YWRkTWV0aG9kOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kLCBtZXNzYWdlICkge1xuXHRcdCQudmFsaWRhdG9yLm1ldGhvZHNbIG5hbWUgXSA9IG1ldGhvZDtcblx0XHQkLnZhbGlkYXRvci5tZXNzYWdlc1sgbmFtZSBdID0gbWVzc2FnZSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZSA6ICQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0aWYgKCBtZXRob2QubGVuZ3RoIDwgMyApIHtcblx0XHRcdCQudmFsaWRhdG9yLmFkZENsYXNzUnVsZXMoIG5hbWUsICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIG5hbWUgKSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IubWV0aG9kcy9cblx0bWV0aG9kczoge1xuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yZXF1aXJlZC1tZXRob2QvXG5cdFx0cmVxdWlyZWQ6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGlmIGRlcGVuZGVuY3kgaXMgbWV0XG5cdFx0XHRpZiAoICF0aGlzLmRlcGVuZCggcGFyYW0sIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0cmV0dXJuIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2VsZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gQ291bGQgYmUgYW4gYXJyYXkgZm9yIHNlbGVjdC1tdWx0aXBsZSBvciBhIHN0cmluZywgYm90aCBhcmUgZmluZSB0aGlzIHdheVxuXHRcdFx0XHR2YXIgdmFsID0gJCggZWxlbWVudCApLnZhbCgpO1xuXHRcdFx0XHRyZXR1cm4gdmFsICYmIHZhbC5sZW5ndGggPiAwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICkgPiAwO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUubGVuZ3RoID4gMDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lbWFpbC1tZXRob2QvXG5cdFx0ZW1haWw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gRnJvbSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG5cdFx0XHQvLyBSZXRyaWV2ZWQgMjAxNC0wMS0xNFxuXHRcdFx0Ly8gSWYgeW91IGhhdmUgYSBwcm9ibGVtIHdpdGggdGhpcyBpbXBsZW1lbnRhdGlvbiwgcmVwb3J0IGEgYnVnIGFnYWluc3QgdGhlIGFib3ZlIHNwZWNcblx0XHRcdC8vIE9yIHVzZSBjdXN0b20gbWV0aG9kcyB0byBpbXBsZW1lbnQgeW91ciBvd24gZW1haWwgdmFsaWRhdGlvblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3VybC1tZXRob2QvXG5cdFx0dXJsOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIENvcHlyaWdodCAoYykgMjAxMC0yMDEzIERpZWdvIFBlcmluaSwgTUlUIGxpY2Vuc2VkXG5cdFx0XHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kcGVyaW5pLzcyOTI5NFxuXHRcdFx0Ly8gc2VlIGFsc28gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL2RlbW8vdXJsLXJlZ2V4XG5cdFx0XHQvLyBtb2RpZmllZCB0byBhbGxvdyBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKD86KD86KD86aHR0cHM/fGZ0cCk6KT9cXC9cXC8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyEoPzoxMHwxMjcpKD86XFwuXFxkezEsM30pezN9KSg/ISg/OjE2OVxcLjI1NHwxOTJcXC4xNjgpKD86XFwuXFxkezEsM30pezJ9KSg/ITE3MlxcLig/OjFbNi05XXwyXFxkfDNbMC0xXSkoPzpcXC5cXGR7MSwzfSl7Mn0pKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswMV1cXGR8MjJbMC0zXSkoPzpcXC4oPzoxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSl7Mn0oPzpcXC4oPzpbMS05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykoPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XS0qKSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKig/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmZdezIsfSkpLj8pKD86OlxcZHsyLDV9KT8oPzpbLz8jXVxcUyopPyQvaS50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGUtbWV0aG9kL1xuXHRcdGRhdGU6ICggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2FsbGVkID0gZmFsc2U7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRcdGlmICggIWNhbGxlZCApIHtcblx0XHRcdFx0XHRjYWxsZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XHRcdFx0XCJUaGUgYGRhdGVgIG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAnMi4wLjAnLlxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJQbGVhc2UgZG9uJ3QgdXNlIGl0LCBzaW5jZSBpdCByZWxpZXMgb24gdGhlIERhdGUgY29uc3RydWN0b3IsIHdoaWNoXFxuXCIgK1xuXHRcdFx0XHRcdFx0XHRcImJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSBhY3Jvc3MgYnJvd3NlcnMgYW5kIGxvY2FsZXMuIFVzZSBgZGF0ZUlTT2BcXG5cIiArXG5cdFx0XHRcdFx0XHRcdFwiaW5zdGVhZCBvciBvbmUgb2YgdGhlIGxvY2FsZSBzcGVjaWZpYyBtZXRob2RzIGluIGBsb2NhbGl6YXRpb25zL2BcXG5cIiArXG5cdFx0XHRcdFx0XHRcdFwiYW5kIGBhZGRpdGlvbmFsLW1ldGhvZHMuanNgLlwiXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgIS9JbnZhbGlkfE5hTi8udGVzdCggbmV3IERhdGUoIHZhbHVlICkudG9TdHJpbmcoKSApO1xuXHRcdFx0fTtcblx0XHR9KCkgKSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZUlTTy1tZXRob2QvXG5cdFx0ZGF0ZUlTTzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxcZHs0fVtcXC9cXC1dKDA/WzEtOV18MVswMTJdKVtcXC9cXC1dKDA/WzEtOV18WzEyXVswLTldfDNbMDFdKSQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbnVtYmVyLW1ldGhvZC9cblx0XHRudW1iZXI6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzotP1xcZCt8LT9cXGR7MSwzfSg/OixcXGR7M30pKyk/KD86XFwuXFxkKyk/JC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kaWdpdHMtbWV0aG9kL1xuXHRcdGRpZ2l0czogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxcZCskLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbmxlbmd0aC1tZXRob2QvXG5cdFx0bWlubGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBsZW5ndGggPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4bGVuZ3RoLW1ldGhvZC9cblx0XHRtYXhsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA8PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yYW5nZWxlbmd0aC1tZXRob2QvXG5cdFx0cmFuZ2VsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICggbGVuZ3RoID49IHBhcmFtWyAwIF0gJiYgbGVuZ3RoIDw9IHBhcmFtWyAxIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW4tbWV0aG9kL1xuXHRcdG1pbjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4LW1ldGhvZC9cblx0XHRtYXg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlLW1ldGhvZC9cblx0XHRyYW5nZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCB2YWx1ZSA+PSBwYXJhbVsgMCBdICYmIHZhbHVlIDw9IHBhcmFtWyAxIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9zdGVwLW1ldGhvZC9cblx0XHRzdGVwOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIHR5cGUgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJ0eXBlXCIgKSxcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gXCJTdGVwIGF0dHJpYnV0ZSBvbiBpbnB1dCB0eXBlIFwiICsgdHlwZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQuXCIsXG5cdFx0XHRcdHN1cHBvcnRlZFR5cGVzID0gWyBcInRleHRcIiwgXCJudW1iZXJcIiwgXCJyYW5nZVwiIF0sXG5cdFx0XHRcdHJlID0gbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdHlwZSArIFwiXFxcXGJcIiApLFxuXHRcdFx0XHRub3RTdXBwb3J0ZWQgPSB0eXBlICYmICFyZS50ZXN0KCBzdXBwb3J0ZWRUeXBlcy5qb2luKCkgKSxcblx0XHRcdFx0ZGVjaW1hbFBsYWNlcyA9IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gKCBcIlwiICsgbnVtICkubWF0Y2goIC8oPzpcXC4oXFxkKykpPyQvICk7XG5cdFx0XHRcdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOdW1iZXIgb2YgZGlnaXRzIHJpZ2h0IG9mIGRlY2ltYWwgcG9pbnQuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoWyAxIF0gPyBtYXRjaFsgMSBdLmxlbmd0aCA6IDA7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvSW50ID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggbnVtICogTWF0aC5wb3coIDEwLCBkZWNpbWFscyApICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZhbGlkID0gdHJ1ZSxcblx0XHRcdFx0ZGVjaW1hbHM7XG5cblx0XHRcdC8vIFdvcmtzIG9ubHkgZm9yIHRleHQsIG51bWJlciBhbmQgcmFuZ2UgaW5wdXQgdHlwZXNcblx0XHRcdC8vIFRPRE8gZmluZCBhIHdheSB0byBzdXBwb3J0IGlucHV0IHR5cGVzIGRhdGUsIGRhdGV0aW1lLCBkYXRldGltZS1sb2NhbCwgbW9udGgsIHRpbWUgYW5kIHdlZWtcblx0XHRcdGlmICggbm90U3VwcG9ydGVkICkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGVycm9yTWVzc2FnZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWNpbWFscyA9IGRlY2ltYWxQbGFjZXMoIHBhcmFtICk7XG5cblx0XHRcdC8vIFZhbHVlIGNhbid0IGhhdmUgdG9vIG1hbnkgZGVjaW1hbHNcblx0XHRcdGlmICggZGVjaW1hbFBsYWNlcyggdmFsdWUgKSA+IGRlY2ltYWxzIHx8IHRvSW50KCB2YWx1ZSApICUgdG9JbnQoIHBhcmFtICkgIT09IDAgKSB7XG5cdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsaWQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZXF1YWxUby1tZXRob2QvXG5cdFx0ZXF1YWxUbzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQmluZCB0byB0aGUgYmx1ciBldmVudCBvZiB0aGUgdGFyZ2V0IGluIG9yZGVyIHRvIHJldmFsaWRhdGUgd2hlbmV2ZXIgdGhlIHRhcmdldCBmaWVsZCBpcyB1cGRhdGVkXG5cdFx0XHR2YXIgdGFyZ2V0ID0gJCggcGFyYW0gKTtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5vbmZvY3Vzb3V0ICYmIHRhcmdldC5ub3QoIFwiLnZhbGlkYXRlLWVxdWFsVG8tYmx1clwiICkubGVuZ3RoICkge1xuXHRcdFx0XHR0YXJnZXQuYWRkQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5vbiggXCJibHVyLnZhbGlkYXRlLWVxdWFsVG9cIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCggZWxlbWVudCApLnZhbGlkKCk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0LnZhbCgpO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlbW90ZS1tZXRob2QvXG5cdFx0cmVtb3RlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtLCBtZXRob2QgKSB7XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0cmV0dXJuIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHR2YXIgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzVmFsdWUoIGVsZW1lbnQsIG1ldGhvZCApLFxuXHRcdFx0XHR2YWxpZGF0b3IsIGRhdGEsIG9wdGlvbkRhdGFTdHJpbmc7XG5cblx0XHRcdGlmICggIXRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0cHJldmlvdXMub3JpZ2luYWxNZXNzYWdlID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlIHx8IHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXTtcblx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXSA9IHByZXZpb3VzLm1lc3NhZ2U7XG5cblx0XHRcdHBhcmFtID0gdHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiICYmIHsgdXJsOiBwYXJhbSB9IHx8IHBhcmFtO1xuXHRcdFx0b3B0aW9uRGF0YVN0cmluZyA9ICQucGFyYW0oICQuZXh0ZW5kKCB7IGRhdGE6IHZhbHVlIH0sIHBhcmFtLmRhdGEgKSApO1xuXHRcdFx0aWYgKCBwcmV2aW91cy5vbGQgPT09IG9wdGlvbkRhdGFTdHJpbmcgKSB7XG5cdFx0XHRcdHJldHVybiBwcmV2aW91cy52YWxpZDtcblx0XHRcdH1cblxuXHRcdFx0cHJldmlvdXMub2xkID0gb3B0aW9uRGF0YVN0cmluZztcblx0XHRcdHZhbGlkYXRvciA9IHRoaXM7XG5cdFx0XHR0aGlzLnN0YXJ0UmVxdWVzdCggZWxlbWVudCApO1xuXHRcdFx0ZGF0YSA9IHt9O1xuXHRcdFx0ZGF0YVsgZWxlbWVudC5uYW1lIF0gPSB2YWx1ZTtcblx0XHRcdCQuYWpheCggJC5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0bW9kZTogXCJhYm9ydFwiLFxuXHRcdFx0XHRwb3J0OiBcInZhbGlkYXRlXCIgKyBlbGVtZW50Lm5hbWUsXG5cdFx0XHRcdGRhdGFUeXBlOiBcImpzb25cIixcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0Y29udGV4dDogdmFsaWRhdG9yLmN1cnJlbnRGb3JtLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbGlkID0gcmVzcG9uc2UgPT09IHRydWUgfHwgcmVzcG9uc2UgPT09IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdFx0ZXJyb3JzLCBtZXNzYWdlLCBzdWJtaXR0ZWQ7XG5cblx0XHRcdFx0XHR2YWxpZGF0b3Iuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXSA9IHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZTtcblx0XHRcdFx0XHRpZiAoIHZhbGlkICkge1xuXHRcdFx0XHRcdFx0c3VibWl0dGVkID0gdmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQ7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci50b0hpZGUgPSB2YWxpZGF0b3IuZXJyb3JzRm9yKCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZCA9IHN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zaG93RXJyb3JzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVycm9ycyA9IHt9O1xuXHRcdFx0XHRcdFx0bWVzc2FnZSA9IHJlc3BvbnNlIHx8IHZhbGlkYXRvci5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1ldGVyczogdmFsdWUgfSApO1xuXHRcdFx0XHRcdFx0ZXJyb3JzWyBlbGVtZW50Lm5hbWUgXSA9IHByZXZpb3VzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zaG93RXJyb3JzKCBlcnJvcnMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHJldmlvdXMudmFsaWQgPSB2YWxpZDtcblx0XHRcdFx0XHR2YWxpZGF0b3Iuc3RvcFJlcXVlc3QoIGVsZW1lbnQsIHZhbGlkICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHBhcmFtICkgKTtcblx0XHRcdHJldHVybiBcInBlbmRpbmdcIjtcblx0XHR9XG5cdH1cblxufSApO1xuXHJcbi8vIEFqYXggbW9kZTogYWJvcnRcbi8vIHVzYWdlOiAkLmFqYXgoeyBtb2RlOiBcImFib3J0XCJbLCBwb3J0OiBcInVuaXF1ZXBvcnRcIl19KTtcbi8vIGlmIG1vZGU6XCJhYm9ydFwiIGlzIHVzZWQsIHRoZSBwcmV2aW91cyByZXF1ZXN0IG9uIHRoYXQgcG9ydCAocG9ydCBjYW4gYmUgdW5kZWZpbmVkKSBpcyBhYm9ydGVkIHZpYSBYTUxIdHRwUmVxdWVzdC5hYm9ydCgpXG5cbnZhciBwZW5kaW5nUmVxdWVzdHMgPSB7fSxcblx0YWpheDtcblxuLy8gVXNlIGEgcHJlZmlsdGVyIGlmIGF2YWlsYWJsZSAoMS41KylcbmlmICggJC5hamF4UHJlZmlsdGVyICkge1xuXHQkLmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzZXR0aW5ncywgXywgeGhyICkge1xuXHRcdHZhciBwb3J0ID0gc2V0dGluZ3MucG9ydDtcblx0XHRpZiAoIHNldHRpbmdzLm1vZGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdGlmICggcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSA9IHhocjtcblx0XHR9XG5cdH0gKTtcbn0gZWxzZSB7XG5cblx0Ly8gUHJveHkgYWpheFxuXHRhamF4ID0gJC5hamF4O1xuXHQkLmFqYXggPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0dmFyIG1vZGUgPSAoIFwibW9kZVwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLm1vZGUsXG5cdFx0XHRwb3J0ID0gKCBcInBvcnRcIiBpbiBzZXR0aW5ncyA/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5wb3J0O1xuXHRcdGlmICggbW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0uYWJvcnQoKTtcblx0XHRcdH1cblx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdID0gYWpheC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRyZXR1cm4gcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF07XG5cdFx0fVxuXHRcdHJldHVybiBhamF4LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fTtcbn1cbnJldHVybiAkO1xyXG59KSk7IiwiXG4oZnVuY3Rpb24gKGV4cCwgJCwgd3BfdmFyKSB7XG5cbiAgICBmdW5jdGlvbiBNZXNzYWdlRm9ybShvcHRpb24pIHtcblxuICAgICAgICB2YXIgJGJ1dHRvblNlbmQgPSAkKCcubWVzc2FnZS1mb3JtLWJ0bi1zZW5kLW1lc3NhZ2UnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGVsZW1lbnQ6IG9wdGlvbi5lbGVtZW50LFxuICAgICAgICAgICAgZm9ybURhdGE6IHtcbiAgICAgICAgICAgICAgICBtYWlsVHlwZTogJ2NvbnRhY3RfZm9ybV9tZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBmb3JtX2RhdGE6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uIChzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHNlbGYuZm9ybURhdGEuZm9ybV9kYXRhID0ge307XG4gICAgICAgICAgICAgICAgJC5lYWNoKHNlbGYuJGVsZW1lbnQuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmZvcm1EYXRhLmZvcm1fZGF0YVt0aGlzLm5hbWVdID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB3cF92YXIuYWpheHVybCArICc/YWN0aW9uPXNlbmRfbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNlbGYuZm9ybURhdGEpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NlbmRNZXNzYWdlU3VjY2VzcyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzICYmIHN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2VuZE1lc3NhZ2VFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2VuZE1lc3NhZ2VFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgJiYgZXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3NlbmRNZXNzYWdlU3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJGJ1dHRvblNlbmQub2ZmKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICRidXR0b25TZW5kLmFkZENsYXNzKCdpcy12YWxpZCcpO1xuXG4gICAgICAgICAgICAgICAgJChsb2NhdGlvbikuYXR0cignaHJlZicsIHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKC9eLipcXC8vKSArICcvbWVzc2FnZS1zdWNjZXNzZnVsbHktc2VudCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3NlbmRNZXNzYWdlRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRidXR0b25TZW5kLmFkZENsYXNzKCdpcy1pbnZhbGlkJyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCd3YXMtdmFsaWRhdGVkJyk7XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XG5cbiAgICAgICAgdmFyIHByb2plY3RDYXJkRmlsdGVyVGl0bGUgPSAkKCcucHJvamVjdC1jYXJkLWZpbHRlciAucHJvamVjdC1jYXJkLWZpbHRlcl9fdGl0bGUnKS50ZXh0KCk7XG4gICAgICAgICQoJy5wcm9qZWN0LWNhcmQtZmlsdGVyIC5kcm9wZG93bi1pdGVtJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY3VzdG9tUHJvamVjdENhcmRGaWx0ZXJUaXRsZSA9ICQodGhpcykudGV4dCgpO1xuICAgICAgICAgICAgaWYoJCh0aGlzKS5oYXNDbGFzcygnZHJvcGRvd24taXRlbS1hbGwnKSkge1xuICAgICAgICAgICAgICAgIGN1c3RvbVByb2plY3RDYXJkRmlsdGVyVGl0bGUgPSBwcm9qZWN0Q2FyZEZpbHRlclRpdGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJCgnLnByb2plY3QtY2FyZC1maWx0ZXJfX3RpdGxlJykudGV4dCggY3VzdG9tUHJvamVjdENhcmRGaWx0ZXJUaXRsZSApO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKFwiI21lc3NhZ2UtZm9ybVwiKS5zdWJtaXQoZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcIiNtZXNzYWdlLWZvcm1cIikudmFsaWRhdGUoe1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VGb3JtID0gbmV3IE1lc3NhZ2VGb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogJCgnI21lc3NhZ2UtZm9ybScpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUZvcm0uc2VuZE1lc3NhZ2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydWxlczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGxlYXNlIGVudGVyIHlvdXIgbmFtZVwiLFxuICAgICAgICAgICAgICAgIGVtYWlsOiAnUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQbGVhc2UgZW50ZXIgeW91ciBtZXNzYWdlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG5cbn0pKHdpbmRvdywgalF1ZXJ5LCB3cF92YXIpO1xuIl19
